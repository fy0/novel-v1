// Code generated by pigeon; DO NOT EDIT.

package novelscript

import (
	"bytes"
	"errors"
	"fmt"
	"math"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

type ParserCustomData struct {
	CurIndex   int
	Name2Index map[string]int
}

func (d *ParserCustomData) getNextIndex() int {
	// 如果我是第0段，那next是1
	d.CurIndex += 1
	return d.CurIndex
}

func (d *ParserCustomData) setSectionIndex(name string) error {
	if name == "" {
		return nil
	}
	if d.Name2Index == nil {
		d.Name2Index = map[string]int{}
	}

	if _, exists := d.Name2Index[name]; exists {
		return errors.New("section name must be unique")
	}

	d.Name2Index[name] = d.CurIndex
	return nil
}

func parseFilterNil[T any](lines any, t T) []*T {
	var items []*T
	if x, ok := lines.([]any); ok {
		for _, i := range x {
			if i != nil {
				if _, ok2 := i.([]any); ok2 {
					items = append(items, parseFilterNil(i, t)...)
				} else {
					items = append(items, i.(*T))
				}
			}
		}
	}
	return items
}

func parseReturnTextSectionLine(c *current, text string) any {
	return &StorySectionLine{
		Type: "", // 作为最常见种类，故意置空，节省空间
		Pos:  []int{c.pos.line, c.pos.col, c.pos.offset},
		Text: text,
	}
}

func parseReturnInvokeSectionLine(c *current, name string, params []string) any {
	return &StorySectionLine{
		Type:   "invoke",
		Pos:    []int{c.pos.line, c.pos.col, c.pos.offset},
		Name:   name,
		Params: params,
	}
}

func parseReturnCodeSectionLine(c *current, typeName string, code string) any {
	return &StorySectionLine{
		Type: typeName,
		Pos:  []int{c.pos.line, c.pos.col, c.pos.offset},
		Code: code,
	}
}

func gatherParams(first any, v any) []string {
	if v == nil {
		return nil
	}

	items := []string{first.(string)}
	if x, ok := v.([]any); ok {
		for _, i := range x {
			items = append(items, i.(string))
		}
	}
	return items
}

func toStr(x []byte) string {
	return string(x)
}

func toStrWithTrim(x []byte) string {
	return strings.TrimSpace(string(x))
}

var g = &grammar{
	rules: []*rule{
		{
			name:      "input",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_oninput_1,
				expr: &seqExpr{
					exprs: []any{
						&ruleRefExpr{name: "sp"},
						&labeledExpr{
							label: "x",
							expr:  &ruleRefExpr{name: "nodes"},
						},
						&notExpr{
							expr: &anyMatcher{},
						},
					},
				},
			},
		},
		{
			name:      "nodes",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_onnodes_1,
				expr: &labeledExpr{
					label: "nodes",
					expr: &zeroOrMoreExpr{
						expr: &ruleRefExpr{name: "node"},
					},
				},
			},
		},
		{
			name:      "_nodeCond",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_on_nodeCond_1,
				expr: &seqExpr{
					exprs: []any{
						&litMatcher{val: "[", want: "\"[\""},
						&labeledExpr{
							label: "cond",
							expr: &zeroOrOneExpr{
								expr: &ruleRefExpr{name: "CodeExpr2"},
							},
						},
						&litMatcher{val: "]", want: "\"]\""},
					},
				},
			},
		},
		{
			name:      "_nodeNext",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_on_nodeNext_1,
				expr: &seqExpr{
					exprs: []any{
						&litMatcher{val: "[", want: "\"[\""},
						&labeledExpr{
							label: "name",
							expr:  &ruleRefExpr{name: "identifier"},
						},
						&litMatcher{val: "]", want: "\"]\""},
					},
				},
			},
		},
		{
			name: "node",
			expr: &choiceExpr{
				alternatives: []any{
					&ruleRefExpr{name: "nodeType1"},
					&ruleRefExpr{name: "nodeType2"},
				},
			},
		},
		{
			name:      "nodeType1",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_onnodeType1_1,
				expr: &seqExpr{
					exprs: []any{
						&litMatcher{val: ":", want: "\":\""},
						&ruleRefExpr{name: "spNoCR"},
						&labeledExpr{
							label: "name",
							expr: &zeroOrOneExpr{
								expr: &ruleRefExpr{name: "identifier"},
							},
						},
						&ruleRefExpr{name: "spNoCR"},
						&seqExpr{
							exprs: []any{
								&labeledExpr{
									label: "cond",
									expr:  &ruleRefExpr{name: "_nodeCond"},
								},
								&ruleRefExpr{name: "spNoCR"},
								&labeledExpr{
									label: "next",
									expr: &zeroOrOneExpr{
										expr: &ruleRefExpr{name: "_nodeNext"},
									},
								},
							},
						},
						&ruleRefExpr{name: "spNoCR"},
						&ruleRefExpr{name: "cr2"},
						&labeledExpr{
							label: "lines",
							expr:  &ruleRefExpr{name: "nodeLines"},
						},
					},
				},
			},
		},
		{
			name:      "nodeType2",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_onnodeType2_1,
				expr: &seqExpr{
					exprs: []any{
						&litMatcher{val: ":", want: "\":\""},
						&ruleRefExpr{name: "spNoCR"},
						&labeledExpr{
							label: "name",
							expr: &zeroOrOneExpr{
								expr: &ruleRefExpr{name: "identifier"},
							},
						},
						&ruleRefExpr{name: "spNoCR"},
						&ruleRefExpr{name: "cr2"},
						&labeledExpr{
							label: "lines",
							expr:  &ruleRefExpr{name: "nodeLines"},
						},
					},
				},
			},
		},
		{
			name:      "nodeLines",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_onnodeLines_1,
				expr: &seqExpr{
					exprs: []any{
						&labeledExpr{
							label: "lines",
							expr: &zeroOrMoreExpr{
								expr: &ruleRefExpr{name: "nodeLine"},
							},
						},
						&ruleRefExpr{name: "sp"},
					},
				},
			},
		},
		{
			name: "nodeLine",
			expr: &choiceExpr{
				alternatives: []any{
					&ruleRefExpr{name: "nodeLineTypeComment"},
					&ruleRefExpr{name: "nodeLineType2"},
					&ruleRefExpr{name: "nodeLineCommonText"},
				},
			},
		},
		{
			name: "nodeLineTypeComment",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "@", want: "\"@\""},
					&litMatcher{val: "#", want: "\"#\""},
					&oneOrMoreExpr{
						expr: &seqExpr{
							exprs: []any{
								&notExpr{
									expr: &ruleRefExpr{name: "cr"},
								},
								&anyMatcher{},
							},
						},
					},
					&ruleRefExpr{name: "cr"},
					&ruleRefExpr{name: "sp"},
				},
			},
		},
		{
			name: "_curLine",
			expr: &actionExpr{
				run: (*parser).call_on_curLine_1,
				expr: &oneOrMoreExpr{
					expr: &seqExpr{
						exprs: []any{
							&notExpr{
								expr: &ruleRefExpr{name: "cr"},
							},
							&anyMatcher{},
						},
					},
				},
			},
		},
		{
			name:      "nodeLineType1x",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_onnodeLineType1x_1,
				expr: &seqExpr{
					exprs: []any{
						&litMatcher{val: "@", want: "\"@\""},
						&notExpr{
							expr: &litMatcher{val: "{", want: "\"{\""},
						},
						&labeledExpr{
							label: "expr",
							expr:  &ruleRefExpr{name: "_curLine"},
						},
						&ruleRefExpr{name: "cr2"},
					},
				},
			},
		},
		{
			name:      "nodeLineType1",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_onnodeLineType1_1,
				expr: &seqExpr{
					exprs: []any{
						&litMatcher{val: "@", want: "\"@\""},
						&labeledExpr{
							label: "name",
							expr:  &ruleRefExpr{name: "identifier"},
						},
						&labeledExpr{
							label: "params",
							expr:  &ruleRefExpr{name: "funcInvoke"},
						},
						&ruleRefExpr{name: "sp"},
					},
				},
			},
		},
		{
			name:      "nodeLineType2",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_onnodeLineType2_1,
				expr: &seqExpr{
					exprs: []any{
						&litMatcher{val: "@{", want: "\"@{\""},
						&labeledExpr{
							label: "code",
							expr:  &ruleRefExpr{name: "Code"},
						},
						&choiceExpr{
							alternatives: []any{
								&litMatcher{val: "}!", want: "\"}!\""},
								&litMatcher{val: "}", want: "\"}\""},
							},
						},
						&ruleRefExpr{name: "spNoCR"},
						&ruleRefExpr{name: "cr2"},
					},
				},
			},
		},
		{
			name: "_nltEscape",
			expr: &actionExpr{
				run:  (*parser).call_on_nltEscape_1,
				expr: &litMatcher{val: "\\{", want: "\"\\\\{\""},
			},
		},
		{
			name: "_nltChar",
			expr: &actionExpr{
				run: (*parser).call_on_nltChar_1,
				expr: &charClassMatcher{
					val:      "[^\\r\\n{]",
					chars:    []rune{'\r', '\n', '{'},
					inverted: true,
				},
			},
		},
		{
			name:      "nodeLineText",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_onnodeLineText_1,
				expr: &labeledExpr{
					label: "items",
					expr: &oneOrMoreExpr{
						expr: &choiceExpr{
							alternatives: []any{
								&ruleRefExpr{name: "_nltEscape"},
								&ruleRefExpr{name: "_nltChar"},
							},
						},
					},
				},
			},
		},
		{
			name:      "nodeLineExprBlock",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_onnodeLineExprBlock_1,
				expr: &seqExpr{
					exprs: []any{
						&litMatcher{val: "{", want: "\"{\""},
						&labeledExpr{
							label: "expr",
							expr:  &ruleRefExpr{name: "CodeExpr"},
						},
						&litMatcher{val: "}", want: "\"}\""},
					},
				},
			},
		},
		{
			name:      "nodeLineCommonText",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_onnodeLineCommonText_1,
				expr: &seqExpr{
					exprs: []any{
						&notExpr{
							expr: &charClassMatcher{
								val:   "[:@]",
								chars: []rune{':', '@'},
							},
						},
						&labeledExpr{
							label: "items",
							expr: &zeroOrMoreExpr{
								expr: &choiceExpr{
									alternatives: []any{
										&ruleRefExpr{name: "nodeLineText"},
										&ruleRefExpr{name: "nodeLineExprBlock"},
									},
								},
							},
						},
						&ruleRefExpr{name: "cr2"},
					},
				},
			},
		},
		{
			name:      "funcInvoke",
			varExists: true,
			expr: &choiceExpr{
				alternatives: []any{
					&actionExpr{
						run: (*parser).call_onfuncInvoke_2,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "(", want: "\"(\""},
								&ruleRefExpr{name: "sp"},
								&litMatcher{val: ")", want: "\")\""},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onfuncInvoke_7,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "(", want: "\"(\""},
								&ruleRefExpr{name: "sp"},
								&labeledExpr{
									label: "first",
									expr:  &ruleRefExpr{name: "_codeExpr"},
								},
								&labeledExpr{
									label: "rest",
									expr: &zeroOrMoreExpr{
										expr: &ruleRefExpr{name: "funcInvokeParamExtend"},
									},
								},
								&litMatcher{val: ")", want: "\")\""},
							},
						},
					},
				},
			},
		},
		{
			name:      "funcInvokeParamExtend",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_onfuncInvokeParamExtend_1,
				expr: &seqExpr{
					exprs: []any{
						&ruleRefExpr{name: "sp"},
						&litMatcher{val: ",", want: "\",\""},
						&ruleRefExpr{name: "sp"},
						&labeledExpr{
							label: "e",
							expr:  &ruleRefExpr{name: "_codeExpr"},
						},
					},
				},
			},
		},
		{
			name: "_codeExpr",
			expr: &actionExpr{
				run:  (*parser).call_on_codeExpr_1,
				expr: &ruleRefExpr{name: "_codeExpr2"},
			},
		},
		{
			name: "_codeExpr2",
			expr: &choiceExpr{
				alternatives: []any{
					&ruleRefExpr{name: "identifier"},
					&ruleRefExpr{name: "integer"},
					&seqExpr{
						exprs: []any{
							&zeroOrMoreExpr{
								expr: &charClassMatcher{
									val:    "[0-9]",
									ranges: []rune{'0', '9'},
								},
							},
							&litMatcher{val: ".", want: "\".\""},
							&oneOrMoreExpr{
								expr: &charClassMatcher{
									val:    "[0-9]",
									ranges: []rune{'0', '9'},
								},
							},
						},
					},
					&ruleRefExpr{name: "stringType"},
				},
			},
		},
		{
			name: "stringType",
			expr: &actionExpr{
				run: (*parser).call_onstringType_1,
				expr: &choiceExpr{
					alternatives: []any{
						&ruleRefExpr{name: "codeString"},
						&seqExpr{
							exprs: []any{
								&litMatcher{val: "`", want: "\"`\""},
								&zeroOrMoreExpr{
									expr: &charClassMatcher{
										val:      "[^`]",
										chars:    []rune{'`'},
										inverted: true,
									},
								},
								&litMatcher{val: "`", want: "\"`\""},
							},
						},
					},
				},
			},
		},
		{
			name: "codeString",
			expr: &choiceExpr{
				alternatives: []any{
					&seqExpr{
						exprs: []any{
							&litMatcher{val: "\"", want: "\"\\\"\""},
							&zeroOrMoreExpr{
								expr: &choiceExpr{
									alternatives: []any{
										&seqExpr{
											exprs: []any{
												&notExpr{
													expr: &ruleRefExpr{name: "EscapedChar"},
												},
												&anyMatcher{},
											},
										},
										&seqExpr{
											exprs: []any{
												&litMatcher{val: "\\", want: "\"\\\\\""},
												&ruleRefExpr{name: "EscapeSequence"},
											},
										},
									},
								},
							},
							&litMatcher{val: "\"", want: "\"\\\"\""},
						},
					},
					&seqExpr{
						exprs: []any{
							&litMatcher{val: "'", want: "\"'\""},
							&zeroOrMoreExpr{
								expr: &choiceExpr{
									alternatives: []any{
										&seqExpr{
											exprs: []any{
												&notExpr{
													expr: &ruleRefExpr{name: "EscapedChar2"},
												},
												&anyMatcher{},
											},
										},
										&seqExpr{
											exprs: []any{
												&litMatcher{val: "\\", want: "\"\\\\\""},
												&ruleRefExpr{name: "EscapeSequence2"},
											},
										},
									},
								},
							},
							&litMatcher{val: "'", want: "\"'\""},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar2",
			expr: &charClassMatcher{
				val:    "[\\x00-\\x1f'\\\\]",
				chars:  []rune{'\'', '\\'},
				ranges: []rune{'\x00', '\x1f'},
			},
		},
		{
			name: "EscapeSequence2",
			expr: &choiceExpr{
				alternatives: []any{
					&ruleRefExpr{name: "SingleCharEscape2"},
					&ruleRefExpr{name: "UnicodeEscape"},
				},
			},
		},
		{
			name: "SingleCharEscape2",
			expr: &charClassMatcher{
				val:   "['\\\\/bfnrt]",
				chars: []rune{'\'', '\\', '/', 'b', 'f', 'n', 'r', 't'},
			},
		},
		{
			name: "String",
			expr: &actionExpr{
				run: (*parser).call_onString_1,
				expr: &seqExpr{
					exprs: []any{
						&litMatcher{val: "\"", want: "\"\\\"\""},
						&zeroOrMoreExpr{
							expr: &choiceExpr{
								alternatives: []any{
									&seqExpr{
										exprs: []any{
											&notExpr{
												expr: &ruleRefExpr{name: "EscapedChar"},
											},
											&anyMatcher{},
										},
									},
									&seqExpr{
										exprs: []any{
											&litMatcher{val: "\\", want: "\"\\\\\""},
											&ruleRefExpr{name: "EscapeSequence"},
										},
									},
								},
							},
						},
						&litMatcher{val: "\"", want: "\"\\\"\""},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			expr: &charClassMatcher{
				val:    "[\\x00-\\x1f\"\\\\]",
				chars:  []rune{'"', '\\'},
				ranges: []rune{'\x00', '\x1f'},
			},
		},
		{
			name: "EscapeSequence",
			expr: &choiceExpr{
				alternatives: []any{
					&ruleRefExpr{name: "SingleCharEscape"},
					&ruleRefExpr{name: "UnicodeEscape"},
				},
			},
		},
		{
			name: "SingleCharEscape",
			expr: &charClassMatcher{
				val:   "[\"\\\\/bfnrt]",
				chars: []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
			},
		},
		{
			name: "UnicodeEscape",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "u", want: "\"u\""},
					&ruleRefExpr{name: "HexDigit"},
					&ruleRefExpr{name: "HexDigit"},
					&ruleRefExpr{name: "HexDigit"},
					&ruleRefExpr{name: "HexDigit"},
				},
			},
		},
		{
			name: "DecimalDigit",
			expr: &charClassMatcher{
				val:    "[0-9]",
				ranges: []rune{'0', '9'},
			},
		},
		{
			name: "NonZeroDecimalDigit",
			expr: &charClassMatcher{
				val:    "[1-9]",
				ranges: []rune{'1', '9'},
			},
		},
		{
			name: "HexDigit",
			expr: &charClassMatcher{
				val:        "[0-9a-f]i",
				ranges:     []rune{'0', '9', 'a', 'f'},
				ignoreCase: true,
			},
		},
		{
			name: "integer",
			expr: &actionExpr{
				run: (*parser).call_oninteger_1,
				expr: &seqExpr{
					exprs: []any{
						&zeroOrOneExpr{
							expr: &litMatcher{val: "-", want: "\"-\""},
						},
						&oneOrMoreExpr{
							expr: &charClassMatcher{
								val:    "[0-9]",
								ranges: []rune{'0', '9'},
							},
						},
					},
				},
			},
		},
		{
			name: "identifier",
			expr: &actionExpr{
				run: (*parser).call_onidentifier_1,
				expr: &seqExpr{
					exprs: []any{
						&ruleRefExpr{name: "xidStart"},
						&zeroOrMoreExpr{
							expr: &ruleRefExpr{name: "xidContinue"},
						},
					},
				},
			},
		},
		{
			name: "xidStart",
			expr: &charClassMatcher{
				val:     "[_\\p{L}\\p{Other_ID_Start}]",
				chars:   []rune{'_'},
				classes: []*unicode.RangeTable{unicode.L, unicode.Other_ID_Start},
			},
		},
		{
			name: "xidContinue",
			expr: &charClassMatcher{
				val:     "[\\p{L}\\p{Other_ID_Start}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\p{Other_ID_Continue}]",
				classes: []*unicode.RangeTable{unicode.L, unicode.Other_ID_Start, unicode.Nl, unicode.Mn, unicode.Mc, unicode.Nd, unicode.Pc, unicode.Other_ID_Continue},
			},
		},
		{
			name:        "sp",
			displayName: "\"whitespace\"",
			expr: &zeroOrMoreExpr{
				expr: &charClassMatcher{
					val:   "[ \\n\\t\\r]",
					chars: []rune{' ', '\n', '\t', '\r'},
				},
			},
		},
		{
			name: "spNoCR",
			expr: &zeroOrMoreExpr{
				expr: &charClassMatcher{
					val:   "[ \\t]",
					chars: []rune{' ', '\t'},
				},
			},
		},
		{
			name: "cr",
			expr: &charClassMatcher{
				val:   "[\\r\\n]",
				chars: []rune{'\r', '\n'},
			},
		},
		{
			name: "cr2",
			expr: &seqExpr{
				exprs: []any{
					&zeroOrOneExpr{
						expr: &litMatcher{val: "\r", want: "\"\\r\""},
					},
					&litMatcher{val: "\n", want: "\"\\n\""},
				},
			},
		},
		{
			name: "SourceChar",
			expr: &anyMatcher{},
		},
		{
			name: "Comment",
			expr: &choiceExpr{
				alternatives: []any{
					&ruleRefExpr{name: "MultiLineComment"},
					&ruleRefExpr{name: "SingleLineComment"},
				},
			},
		},
		{
			name: "MultiLineComment",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "/*", want: "\"/*\""},
					&zeroOrMoreExpr{
						expr: &seqExpr{
							exprs: []any{
								&notExpr{
									expr: &litMatcher{val: "*/", want: "\"*/\""},
								},
								&ruleRefExpr{name: "SourceChar"},
							},
						},
					},
					&litMatcher{val: "*/", want: "\"*/\""},
				},
			},
		},
		{
			name: "MultiLineCommentNoLineTerminator",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "/*", want: "\"/*\""},
					&zeroOrMoreExpr{
						expr: &seqExpr{
							exprs: []any{
								&notExpr{
									expr: &choiceExpr{
										alternatives: []any{
											&litMatcher{val: "*/", want: "\"*/\""},
											&ruleRefExpr{name: "cr"},
										},
									},
								},
								&ruleRefExpr{name: "SourceChar"},
							},
						},
					},
					&litMatcher{val: "*/", want: "\"*/\""},
				},
			},
		},
		{
			name: "SingleLineComment",
			expr: &seqExpr{
				exprs: []any{
					&notExpr{
						expr: &litMatcher{val: "//{", want: "\"//{\""},
					},
					&litMatcher{val: "//", want: "\"//\""},
					&zeroOrMoreExpr{
						expr: &seqExpr{
							exprs: []any{
								&notExpr{
									expr: &ruleRefExpr{name: "cr"},
								},
								&ruleRefExpr{name: "SourceChar"},
							},
						},
					},
				},
			},
		},
		{
			name: "CodeStringLiteral",
			expr: &choiceExpr{
				alternatives: []any{
					&seqExpr{
						exprs: []any{
							&litMatcher{val: "\"", want: "\"\\\"\""},
							&zeroOrMoreExpr{
								expr: &choiceExpr{
									alternatives: []any{
										&litMatcher{val: "\\\"", want: "\"\\\\\\\"\""},
										&litMatcher{val: "\\\\", want: "\"\\\\\\\\\""},
										&charClassMatcher{
											val:      "[^\"\\r\\n]",
											chars:    []rune{'"', '\r', '\n'},
											inverted: true,
										},
									},
								},
							},
							&litMatcher{val: "\"", want: "\"\\\"\""},
						},
					},
					&seqExpr{
						exprs: []any{
							&litMatcher{val: "`", want: "\"`\""},
							&zeroOrMoreExpr{
								expr: &charClassMatcher{
									val:      "[^`]",
									chars:    []rune{'`'},
									inverted: true,
								},
							},
							&litMatcher{val: "`", want: "\"`\""},
						},
					},
					&seqExpr{
						exprs: []any{
							&litMatcher{val: "'", want: "\"'\""},
							&zeroOrMoreExpr{
								expr: &choiceExpr{
									alternatives: []any{
										&litMatcher{val: "\\'", want: "\"\\\\'\""},
										&litMatcher{val: "\\\\", want: "\"\\\\\\\\\""},
										&oneOrMoreExpr{
											expr: &charClassMatcher{
												val:      "[^']",
												chars:    []rune{'\''},
												inverted: true,
											},
										},
									},
								},
							},
							&litMatcher{val: "'", want: "\"'\""},
						},
					},
				},
			},
		},
		{
			name: "Code",
			expr: &actionExpr{
				run: (*parser).call_onCode_1,
				expr: &zeroOrMoreExpr{
					expr: &choiceExpr{
						alternatives: []any{
							&oneOrMoreExpr{
								expr: &choiceExpr{
									alternatives: []any{
										&ruleRefExpr{name: "Comment"},
										&ruleRefExpr{name: "CodeStringLiteral"},
										&seqExpr{
											exprs: []any{
												&notExpr{
													expr: &charClassMatcher{
														val:   "[{}]",
														chars: []rune{'{', '}'},
													},
												},
												&ruleRefExpr{name: "SourceChar"},
											},
										},
									},
								},
							},
							&seqExpr{
								exprs: []any{
									&litMatcher{val: "{", want: "\"{\""},
									&ruleRefExpr{name: "Code"},
									&litMatcher{val: "}", want: "\"}\""},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CodeExpr",
			expr: &actionExpr{
				run: (*parser).call_onCodeExpr_1,
				expr: &zeroOrMoreExpr{
					expr: &choiceExpr{
						alternatives: []any{
							&oneOrMoreExpr{
								expr: &choiceExpr{
									alternatives: []any{
										&ruleRefExpr{name: "CodeStringLiteral"},
										&seqExpr{
											exprs: []any{
												&notExpr{
													expr: &charClassMatcher{
														val:   "[{}]",
														chars: []rune{'{', '}'},
													},
												},
												&ruleRefExpr{name: "SourceChar"},
											},
										},
									},
								},
							},
							&seqExpr{
								exprs: []any{
									&litMatcher{val: "{", want: "\"{\""},
									&ruleRefExpr{name: "CodeExpr"},
									&litMatcher{val: "}", want: "\"}\""},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CodeExpr2",
			expr: &actionExpr{
				run: (*parser).call_onCodeExpr2_1,
				expr: &zeroOrMoreExpr{
					expr: &choiceExpr{
						alternatives: []any{
							&oneOrMoreExpr{
								expr: &choiceExpr{
									alternatives: []any{
										&ruleRefExpr{name: "CodeStringLiteral"},
										&seqExpr{
											exprs: []any{
												&notExpr{
													expr: &charClassMatcher{
														val:   "[[\\]]",
														chars: []rune{'[', ']'},
													},
												},
												&ruleRefExpr{name: "SourceChar"},
											},
										},
									},
								},
							},
							&seqExpr{
								exprs: []any{
									&litMatcher{val: "[", want: "\"[\""},
									&ruleRefExpr{name: "CodeExpr2"},
									&litMatcher{val: "]", want: "\"]\""},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (p *parser) call_oninput_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, x any) any {
		return x
		return nil
	})(&p.cur, stack["x"])
}

func (p *parser) call_onnodes_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, nodes any) any {
		var items []*StorySection
		if x, ok := nodes.([]any); ok {
			for _, i := range x {
				items = append(items, i.(*StorySection))
			}
		}
		return &Story{Items: items}
		return nil
	})(&p.cur, stack["nodes"])
}

func (p *parser) call_on_nodeCond_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, cond any) any {
		return cond
		return nil
	})(&p.cur, stack["cond"])
}

func (p *parser) call_on_nodeNext_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, name any) any {
		return name
		return nil
	})(&p.cur, stack["name"])
}

func (p *parser) call_onnodeType1_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, name, cond, next, lines any) any {
		nameStr, _ := name.(string)
		condStr, _ := cond.(string)
		nextStr, _ := next.(string)
		items := parseFilterNil(lines, StorySectionLine{})

		if err := c.data.setSectionIndex(nameStr); err != nil {
			p.addErr(err)
			return nil
		}
		return &StorySection{
			Pos:       []int{c.pos.line, c.pos.col, c.pos.offset},
			Name:      nameStr,
			Lines:     items,
			Condition: condStr,
			Next:      nextStr,
			NextIndex: c.data.getNextIndex(),
		}
		return nil
	})(&p.cur, stack["name"], stack["cond"], stack["next"], stack["lines"])
}

func (p *parser) call_onnodeType2_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, name, lines any) any {
		nameStr, _ := name.(string)
		items := parseFilterNil(lines, StorySectionLine{})

		if err := c.data.setSectionIndex(nameStr); err != nil {
			p.addErr(err)
			return nil
		}
		return &StorySection{
			Pos:       []int{c.pos.line, c.pos.col, c.pos.offset},
			Name:      nameStr,
			Lines:     items,
			NextIndex: c.data.getNextIndex(),
		}
		return nil
	})(&p.cur, stack["name"], stack["lines"])
}

func (p *parser) call_onnodeLines_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, lines any) any {
		return lines
		return nil
	})(&p.cur, stack["lines"])
}

func (p *parser) call_on_curLine_1() any {
	return (func(c *current) any {
		return toStr(c.text)
		return nil
	})(&p.cur)
}

func (p *parser) call_onnodeLineType1x_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, expr any) any {
		// return parseReturnCodeSectionLine(c, "@", expr.(string));
		return nil
	})(&p.cur, stack["expr"])
}

func (p *parser) call_onnodeLineType1_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, name, params any) any {
		return parseReturnInvokeSectionLine(c, name.(string), params.([]string))
		return nil
	})(&p.cur, stack["name"], stack["params"])
}

func (p *parser) call_onnodeLineType2_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, code any) any {
		return parseReturnCodeSectionLine(c, "codeBlock", code.(string))
		return nil
	})(&p.cur, stack["code"])
}

func (p *parser) call_on_nltEscape_1() any {
	return (func(c *current) any {
		return "{"
		return nil
	})(&p.cur)
}

func (p *parser) call_on_nltChar_1() any {
	return (func(c *current) any {
		return toStr(c.text)
		return nil
	})(&p.cur)
}

func (p *parser) call_onnodeLineText_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, items any) any {
		var items2 []string
		for _, i := range items.([]any) {
			items2 = append(items2, i.(string))
		}
		text := strings.Join(items2, "")
		return parseReturnTextSectionLine(c, text)
		return nil
	})(&p.cur, stack["items"])
}

func (p *parser) call_onnodeLineExprBlock_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, expr any) any {
		return parseReturnCodeSectionLine(c, "codeInText", expr.(string))
		return nil
	})(&p.cur, stack["expr"])
}

func (p *parser) call_onnodeLineCommonText_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, items any) any {
		v := parseReturnTextSectionLine(c, "\n")
		items2, ok := items.([]any)
		if !ok {
			items2 = []any{}
		}
		items2 = append(items2, v)
		return items2
		return nil
	})(&p.cur, stack["items"])
}

func (p *parser) call_onfuncInvoke_2() any {
	return (func(c *current) any {
		return []string{}
		return nil
	})(&p.cur)
}

func (p *parser) call_onfuncInvoke_7() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, first, rest any) any {
		return gatherParams(first, rest)
		return nil
	})(&p.cur, stack["first"], stack["rest"])
}

func (p *parser) call_onfuncInvokeParamExtend_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, e any) any {
		return e
		return nil
	})(&p.cur, stack["e"])
}

func (p *parser) call_on_codeExpr_1() any {
	return (func(c *current) any {
		return toStr(c.text)
		return nil
	})(&p.cur)
}

func (p *parser) call_onstringType_1() any {
	return (func(c *current) any {
		return toStr(c.text)
		return nil
	})(&p.cur)
}

func (p *parser) call_onString_1() any {
	return (func(c *current) any {
		// c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
		// return strconv.Unquote(string(c.text))
		return nil
	})(&p.cur)
}

func (p *parser) call_oninteger_1() any {
	return (func(c *current) any {
		val, _ := strconv.Atoi(string(c.text))
		return val
		return nil
	})(&p.cur)
}

func (p *parser) call_onidentifier_1() any {
	return (func(c *current) any {
		return toStr(c.text)
		return nil
	})(&p.cur)
}

func (p *parser) call_onCode_1() any {
	return (func(c *current) any {
		return toStr(c.text)
		return nil
	})(&p.cur)
}

func (p *parser) call_onCodeExpr_1() any {
	return (func(c *current) any {
		return toStr(c.text)
		return nil
	})(&p.cur)
}

func (p *parser) call_onCodeExpr2_1() any {
	return (func(c *current) any {
		return toStr(c.text)
		return nil
	})(&p.cur)
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// remove generic because it can't be compiled by gopherjs
type parserStack struct {
	data  []savepoint
	index int
	size  int
}

func (ss *parserStack) init(size int) {
	ss.index = -1
	ss.data = make([]savepoint, size)
	ss.size = size
}

func (ss *parserStack) push(v *savepoint) {
	ss.index += 1
	if ss.index == ss.size {
		ss.data = append(ss.data, *v)
		ss.size = len(ss.data)
	} else {
		ss.data[ss.index] = *v
	}
}

func (ss *parserStack) pop() *savepoint {
	ref := &ss.data[ss.index]
	ss.index--
	return ref
}

func (ss *parserStack) top() *savepoint {
	return &ss.data[ss.index]
}

// option is a function that can set an option on the parser. It returns
// the previous setting as an option.
type option func(*parser) option

// Parse parses the data from b using filename as information in the
// error messages.
func parse(filename string, b []byte, opts ...option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match
	data *ParserCustomData
}

// the AST types...

// nolint: structcheck
type grammar struct {
	rules []*rule
}

// nolint: structcheck
type rule struct {
	name        string
	displayName string
	expr        any
	varExists   bool
}

// nolint: structcheck
type choiceExpr struct {
	alternatives []any
}

// nolint: structcheck
type actionExpr struct {
	expr any
	run  func(*parser) any
}

// nolint: structcheck
type recoveryExpr struct {
	expr         any
	recoverExpr  any
	failureLabel []string
}

// nolint: structcheck
type seqExpr struct {
	exprs []any
}

// nolint: structcheck
type throwExpr struct {
	label string
}

// nolint: structcheck
type labeledExpr struct {
	label       string
	expr        any
	textCapture bool
}

// nolint: structcheck
type expr struct {
	expr any
}

type (
	andExpr        expr // nolint: structcheck
	notExpr        expr // nolint: structcheck
	andLogicalExpr expr // nolint: structcheck
	notLogicalExpr expr // nolint: structcheck
	zeroOrOneExpr  expr // nolint: structcheck
	zeroOrMoreExpr expr // nolint: structcheck
	oneOrMoreExpr  expr // nolint: structcheck
)

// nolint: structcheck
type ruleRefExpr struct {
	name string
}

// nolint: structcheck
type andCodeExpr struct {
	run func(*parser) bool
}

// nolint: structcheck
type notCodeExpr struct {
	run func(*parser) bool
}

// nolint: structcheck
type litMatcher struct {
	val        string
	ignoreCase bool
	want       string
}

// nolint: structcheck
type codeExpr struct {
	run     func(*parser) any
	notSkip bool
}

// nolint: structcheck
type charClassMatcher struct {
	val        string
	chars      []rune
	ranges     []rune
	classes    []*unicode.RangeTable
	ignoreCase bool
	inverted   bool
}

type anyMatcher struct{} // nolint: structcheck

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// nolint: structcheck,deadcode
type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

// nolint: varcheck
const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the exprType of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The exprType of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

// nolint: structcheck,maligned
type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules      map[string]*rule
	rulesArray []*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any

	_errPos *position
	// skip code stack
	scStack []bool
	// save point stack
	spStack parserStack
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			data: &ParserCustomData{},
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: "input",
		scStack:    []bool{false},
	}

	p.spStack.init(5)
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []option) {
	for _, opt := range opts {
		opt(p)
	}
}

// setCustomData to the parser.
func (p *parser) setCustomData(data *ParserCustomData) {
	p.cur.data = data
}

func (p *parser) checkSkipCode() bool {
	return p.scStack[len(p.scStack)-1]
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	if p._errPos != nil {
		p.addErrAt(err, *p._errPos, []string{})
	} else {
		p.addErrAt(err, p.pt.position, []string{})
	}
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos *position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = *pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt *savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = *pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start *savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFromOffset(offset int) []byte {
	return p.data[offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

// nolint: gocyclo
func (p *parser) parse(grammar *grammar) (val any, err error) {
	if grammar == nil {
		grammar = g
	}
	if len(grammar.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	p.rulesArray = grammar.rules
	p.buildRulesTable(grammar)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	var val any
	var ok bool
	if rule.varExists && !p.checkSkipCode() {
		p.pushV()
		val, ok = p.parseExprWrap(rule.expr)
		p.popV()
	} else {
		val, ok = p.parseExprWrap(rule.expr)
	}
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

// nolint: gocyclo
func (p *parser) parseExprWrap(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *andLogicalExpr:
		val, ok = p.parseAndLogicalExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *codeExpr:
		val, ok = p.parseCodeExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *notLogicalExpr:
		val, ok = p.parseNotLogicalExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.checkSkipCode() {
		_, ok := p.parseExprWrap(act.expr)
		return nil, ok
	}

	p.spStack.push(&p.pt)
	val, ok := p.parseExprWrap(act.expr)
	start := p.spStack.pop()

	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		p._errPos = &start.position
		actVal := act.run(p)
		p._errPos = nil

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	ok := and.run(p)
	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	return p.parseAndExprBase(and, false)
}

func (p *parser) parseAndLogicalExpr(and *andLogicalExpr) (any, bool) {
	return p.parseAndExprBase((*andExpr)(and), true)
}

func (p *parser) parseAndExprBase(and *andExpr, logical bool) (any, bool) {
	pt := p.pt

	p.scStack = append(p.scStack, true)
	_, ok := p.parseExprWrap(and.expr)
	p.scStack = p.scStack[:len(p.scStack)-1]

	matchedOffset := p.pt.offset
	p.restore(&pt)

	if logical {
		return nil, ok && p.pt.offset != matchedOffset
	}
	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, &p.pt.position, ".")
		return nil, false
	}
	p.failAt(true, &p.pt.position, ".")
	p.read()
	return nil, true
}

// nolint: gocyclo
func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, &p.pt.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, &p.pt.position, chr.val)
				return nil, false
			}
			p.failAt(true, &p.pt.position, chr.val)
			p.read()
			return nil, true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, &p.pt.position, chr.val)
				return nil, false
			}
			p.failAt(true, &p.pt.position, chr.val)
			p.read()
			return nil, true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, &p.pt.position, chr.val)
				return nil, false
			}
			p.failAt(true, &p.pt.position, chr.val)
			p.read()
			return nil, true
		}
	}

	if chr.inverted {
		p.failAt(true, &p.pt.position, chr.val)
		p.read()
		return nil, true
	}
	p.failAt(false, &p.pt.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		val, ok := p.parseExprWrap(alt)
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	startOffset := p.pt.position.offset
	var val any
	var ok bool
	val, ok = p.parseExprWrap(lab.expr)
	if ok && lab.label != "" && !p.checkSkipCode() {
		m := p.vstack[len(p.vstack)-1]
		if lab.textCapture {
			m[lab.label] = string(p.sliceFromOffset(startOffset))
		} else {
			m[lab.label] = val
		}
	}
	return val, ok
}

func (p *parser) parseCodeExpr(code *codeExpr) (any, bool) {
	if !code.notSkip && p.checkSkipCode() {
		return nil, true
	}
	return code.run(p), true
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, &start.position, lit.want)
			p.restore(&start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, &start.position, lit.want)
	return nil, true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok := not.run(p)
	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	return p.parseNotExprBase(not, false)
}

func (p *parser) parseNotLogicalExpr(not *notLogicalExpr) (any, bool) {
	return p.parseNotExprBase((*notExpr)(not), true)
}

func (p *parser) parseNotExprBase(not *notExpr, logical bool) (any, bool) {
	pt := p.pt
	p.maxFailInvertExpected = !p.maxFailInvertExpected

	p.scStack = append(p.scStack, true)
	_, ok := p.parseExprWrap(not.expr)
	p.scStack = p.scStack[:len(p.scStack)-1]

	p.maxFailInvertExpected = !p.maxFailInvertExpected
	matchedOffset := p.pt.offset
	p.restore(&pt)

	if logical {
		return nil, ok && p.pt.offset != matchedOffset
	}
	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any
	var matched bool
	for {
		val, ok := p.parseExprWrap(expr.expr)
		if !ok {
			if len(vals) > 0 {
				return vals, matched
			}
			return nil, matched
		}
		matched = true
		if val != nil {
			vals = append(vals, val)
		}
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	var vals []any
	notSkipCode := p.checkSkipCode()

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(&pt)
			return nil, false
		}
		if notSkipCode && val != nil {
			vals = append(vals, val)
		}
	}
	if len(vals) > 0 {
		return vals, true
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}
	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any
	for {
		val, ok := p.parseExprWrap(expr.expr)
		if !ok {
			if len(vals) > 0 {
				return vals, true
			}
			return nil, true
		}
		if val != nil {
			vals = append(vals, val)
		}
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	val, _ := p.parseExprWrap(expr.expr)
	// whether it matched or not, consider it a match
	return val, true
}
