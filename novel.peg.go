// Code generated by pigeon; DO NOT EDIT.

package novelscript

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

type Story struct {
	Name  string       `json:"name"`
	Items []*StoryNode `json:"items"`
}

type StoryNode struct {
	Pos       []int            `json:"pos"` // line, col, pos
	Name      string           `json:"name"`
	Lines     []*StoryNodeLine `json:"lines"`
	Condition string           `json:"cond,omitempty"`
	Next      string           `json:"next,omitempty"`
}

type StoryNodeLine struct {
	Pos []int `json:"pos"` // line, col, pos

	Type string `json:"type,omitempty"`

	// type: invoke 注: 这种情况下type置空，节省空间
	Name   string   `json:"name,omitempty"`
	Params []string `json:"params,omitempty"`

	// type: code
	Code string `json:"code,omitempty"`
}

func gatherParams(first any, v any) []string {
	if v == nil {
		return nil
	}

	items := []string{first.(string)}
	if x, ok := v.([]any); ok {
		for _, i := range x {
			items = append(items, i.(string))
		}
	}
	return items
}

var g = &grammar{
	rules: []*rule{
		{
			name: "input",
			pos:  position{line: 47, col: 1, offset: 950},
			expr: &actionExpr{
				pos: position{line: 47, col: 10, offset: 959},
				run: (*parser).calloninput1,
				expr: &seqExpr{
					pos: position{line: 47, col: 10, offset: 959},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 196, col: 20, offset: 5219},
							expr: &charClassMatcher{
								pos:        position{line: 196, col: 20, offset: 5219},
								val:        "[ \\n\\t\\r]",
								chars:      []rune{' ', '\n', '\t', '\r'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 47, col: 13, offset: 962},
							label: "x",
							expr: &actionExpr{
								pos: position{line: 51, col: 10, offset: 1009},
								run: (*parser).calloninput6,
								expr: &labeledExpr{
									pos:   position{line: 51, col: 10, offset: 1009},
									label: "nodes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 51, col: 17, offset: 1016},
										expr: &choiceExpr{
											pos: position{line: 65, col: 9, offset: 1404},
											alternatives: []any{
												&actionExpr{
													pos: position{line: 67, col: 14, offset: 1442},
													run: (*parser).calloninput10,
													expr: &seqExpr{
														pos: position{line: 67, col: 14, offset: 1442},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 67, col: 14, offset: 1442},
																val:        ":",
																ignoreCase: false,
																want:       "\":\"",
															},
															&labeledExpr{
																pos:   position{line: 67, col: 18, offset: 1446},
																label: "name",
																expr: &zeroOrOneExpr{
																	pos: position{line: 67, col: 23, offset: 1451},
																	expr: &actionExpr{
																		pos: position{line: 186, col: 15, offset: 4906},
																		run: (*parser).calloninput15,
																		expr: &seqExpr{
																			pos: position{line: 186, col: 15, offset: 4906},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 191, col: 13, offset: 5003},
																					val:        "[_\\pL\\pOther_ID_Start]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 186, col: 24, offset: 4915},
																					expr: &charClassMatcher{
																						pos:        position{line: 194, col: 16, offset: 5120},
																						val:        "[\\pL\\pOther_ID_Start\\pNl\\pMn\\pMc\\pNd\\pPc\\pOther_ID_Continue]",
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start"), rangeTable("Nl"), rangeTable("Mn"), rangeTable("Mc"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Other_ID_Continue")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 67, col: 36, offset: 1464},
																label: "cond",
																expr: &actionExpr{
																	pos: position{line: 62, col: 14, offset: 1282},
																	run: (*parser).calloninput21,
																	expr: &seqExpr{
																		pos: position{line: 62, col: 14, offset: 1282},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 62, col: 14, offset: 1282},
																				val:        "[",
																				ignoreCase: false,
																				want:       "\"[\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 62, col: 18, offset: 1286},
																				label: "cond",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 62, col: 23, offset: 1291},
																					expr: &actionExpr{
																						pos: position{line: 61, col: 21, offset: 1230},
																						run: (*parser).calloninput26,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 61, col: 21, offset: 1230},
																							expr: &charClassMatcher{
																								pos:        position{line: 61, col: 21, offset: 1230},
																								val:        "[^]]",
																								chars:      []rune{']'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 62, col: 41, offset: 1309},
																				val:        "]",
																				ignoreCase: false,
																				want:       "\"]\"",
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 67, col: 51, offset: 1479},
																label: "next",
																expr: &zeroOrOneExpr{
																	pos: position{line: 67, col: 56, offset: 1484},
																	expr: &actionExpr{
																		pos: position{line: 63, col: 14, offset: 1348},
																		run: (*parser).calloninput32,
																		expr: &seqExpr{
																			pos: position{line: 63, col: 14, offset: 1348},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 63, col: 14, offset: 1348},
																					val:        "[",
																					ignoreCase: false,
																					want:       "\"[\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 63, col: 18, offset: 1352},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 186, col: 15, offset: 4906},
																						run: (*parser).calloninput36,
																						expr: &seqExpr{
																							pos: position{line: 186, col: 15, offset: 4906},
																							exprs: []any{
																								&charClassMatcher{
																									pos:        position{line: 191, col: 13, offset: 5003},
																									val:        "[_\\pL\\pOther_ID_Start]",
																									chars:      []rune{'_'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 186, col: 24, offset: 4915},
																									expr: &charClassMatcher{
																										pos:        position{line: 194, col: 16, offset: 5120},
																										val:        "[\\pL\\pOther_ID_Start\\pNl\\pMn\\pMc\\pNd\\pPc\\pOther_ID_Continue]",
																										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start"), rangeTable("Nl"), rangeTable("Mn"), rangeTable("Mc"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Other_ID_Continue")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 63, col: 34, offset: 1368},
																					val:        "]",
																					ignoreCase: false,
																					want:       "\"]\"",
																				},
																			},
																		},
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 198, col: 11, offset: 5243},
																expr: &charClassMatcher{
																	pos:        position{line: 198, col: 11, offset: 5243},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&charClassMatcher{
																pos:        position{line: 200, col: 7, offset: 5259},
																val:        "[\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
															&labeledExpr{
																pos:   position{line: 67, col: 78, offset: 1506},
																label: "lines",
																expr: &actionExpr{
																	pos: position{line: 109, col: 14, offset: 2458},
																	run: (*parser).calloninput46,
																	expr: &seqExpr{
																		pos: position{line: 109, col: 14, offset: 2458},
																		exprs: []any{
																			&labeledExpr{
																				pos:   position{line: 109, col: 14, offset: 2458},
																				label: "lines",
																				expr: &zeroOrMoreExpr{
																					pos: position{line: 109, col: 20, offset: 2464},
																					expr: &choiceExpr{
																						pos: position{line: 111, col: 13, offset: 2514},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 113, col: 24, offset: 2608},
																								run: (*parser).calloninput51,
																								expr: &seqExpr{
																									pos: position{line: 113, col: 24, offset: 2608},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 113, col: 24, offset: 2608},
																											val:        "@#",
																											ignoreCase: false,
																											want:       "\"@#\"",
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 113, col: 32, offset: 2616},
																											expr: &seqExpr{
																												pos: position{line: 113, col: 33, offset: 2617},
																												exprs: []any{
																													&notExpr{
																														pos: position{line: 113, col: 33, offset: 2617},
																														expr: &charClassMatcher{
																															pos:        position{line: 200, col: 7, offset: 5259},
																															val:        "[\\r\\n]",
																															chars:      []rune{'\r', '\n'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&anyMatcher{
																														line: 113, col: 37, offset: 2621,
																													},
																												},
																											},
																										},
																										&charClassMatcher{
																											pos:        position{line: 200, col: 7, offset: 5259},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 196, col: 20, offset: 5219},
																											expr: &charClassMatcher{
																												pos:        position{line: 196, col: 20, offset: 5219},
																												val:        "[ \\n\\t\\r]",
																												chars:      []rune{' ', '\n', '\t', '\r'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 115, col: 18, offset: 2671},
																								run: (*parser).calloninput62,
																								expr: &seqExpr{
																									pos: position{line: 115, col: 18, offset: 2671},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 115, col: 18, offset: 2671},
																											val:        "@",
																											ignoreCase: false,
																											want:       "\"@\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 115, col: 22, offset: 2675},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 186, col: 15, offset: 4906},
																												run: (*parser).calloninput66,
																												expr: &seqExpr{
																													pos: position{line: 186, col: 15, offset: 4906},
																													exprs: []any{
																														&charClassMatcher{
																															pos:        position{line: 191, col: 13, offset: 5003},
																															val:        "[_\\pL\\pOther_ID_Start]",
																															chars:      []rune{'_'},
																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 186, col: 24, offset: 4915},
																															expr: &charClassMatcher{
																																pos:        position{line: 194, col: 16, offset: 5120},
																																val:        "[\\pL\\pOther_ID_Start\\pNl\\pMn\\pMc\\pNd\\pPc\\pOther_ID_Continue]",
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start"), rangeTable("Nl"), rangeTable("Mn"), rangeTable("Mc"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Other_ID_Continue")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 115, col: 38, offset: 2691},
																											label: "params",
																											expr: &choiceExpr{
																												pos: position{line: 148, col: 15, offset: 3606},
																												alternatives: []any{
																													&actionExpr{
																														pos: position{line: 148, col: 15, offset: 3606},
																														run: (*parser).calloninput73,
																														expr: &seqExpr{
																															pos: position{line: 148, col: 15, offset: 3606},
																															exprs: []any{
																																&litMatcher{
																																	pos:        position{line: 148, col: 15, offset: 3606},
																																	val:        "(",
																																	ignoreCase: false,
																																	want:       "\"(\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 196, col: 20, offset: 5219},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 196, col: 20, offset: 5219},
																																		val:        "[ \\n\\t\\r]",
																																		chars:      []rune{' ', '\n', '\t', '\r'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 148, col: 22, offset: 3613},
																																	val:        ")",
																																	ignoreCase: false,
																																	want:       "\")\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 149, col: 15, offset: 3659},
																														run: (*parser).calloninput79,
																														expr: &seqExpr{
																															pos: position{line: 149, col: 15, offset: 3659},
																															exprs: []any{
																																&litMatcher{
																																	pos:        position{line: 149, col: 15, offset: 3659},
																																	val:        "(",
																																	ignoreCase: false,
																																	want:       "\"(\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 196, col: 20, offset: 5219},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 196, col: 20, offset: 5219},
																																		val:        "[ \\n\\t\\r]",
																																		chars:      []rune{' ', '\n', '\t', '\r'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 149, col: 22, offset: 3666},
																																	label: "first",
																																	expr: &actionExpr{
																																		pos: position{line: 154, col: 13, offset: 3895},
																																		run: (*parser).calloninput85,
																																		expr: &choiceExpr{
																																			pos: position{line: 156, col: 14, offset: 3952},
																																			alternatives: []any{
																																				&actionExpr{
																																					pos: position{line: 186, col: 15, offset: 4906},
																																					run: (*parser).calloninput87,
																																					expr: &seqExpr{
																																						pos: position{line: 186, col: 15, offset: 4906},
																																						exprs: []any{
																																							&charClassMatcher{
																																								pos:        position{line: 191, col: 13, offset: 5003},
																																								val:        "[_\\pL\\pOther_ID_Start]",
																																								chars:      []rune{'_'},
																																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 186, col: 24, offset: 4915},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 194, col: 16, offset: 5120},
																																									val:        "[\\pL\\pOther_ID_Start\\pNl\\pMn\\pMc\\pNd\\pPc\\pOther_ID_Continue]",
																																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start"), rangeTable("Nl"), rangeTable("Mn"), rangeTable("Mc"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Other_ID_Continue")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 182, col: 12, offset: 4831},
																																					run: (*parser).calloninput92,
																																					expr: &seqExpr{
																																						pos: position{line: 182, col: 12, offset: 4831},
																																						exprs: []any{
																																							&zeroOrOneExpr{
																																								pos: position{line: 182, col: 12, offset: 4831},
																																								expr: &litMatcher{
																																									pos:        position{line: 182, col: 12, offset: 4831},
																																									val:        "-",
																																									ignoreCase: false,
																																									want:       "\"-\"",
																																								},
																																							},
																																							&oneOrMoreExpr{
																																								pos: position{line: 182, col: 17, offset: 4836},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 182, col: 17, offset: 4836},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&seqExpr{
																																					pos: position{line: 158, col: 14, offset: 3999},
																																					exprs: []any{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 158, col: 14, offset: 3999},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 158, col: 14, offset: 3999},
																																								val:        "[0-9]",
																																								ranges:     []rune{'0', '9'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 158, col: 21, offset: 4006},
																																							val:        ".",
																																							ignoreCase: false,
																																							want:       "\".\"",
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 158, col: 25, offset: 4010},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 158, col: 25, offset: 4010},
																																								val:        "[0-9]",
																																								ranges:     []rune{'0', '9'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 161, col: 15, offset: 4059},
																																					run: (*parser).calloninput104,
																																					expr: &choiceExpr{
																																						pos: position{line: 161, col: 16, offset: 4060},
																																						alternatives: []any{
																																							&seqExpr{
																																								pos: position{line: 163, col: 14, offset: 4137},
																																								exprs: []any{
																																									&litMatcher{
																																										pos:        position{line: 163, col: 14, offset: 4137},
																																										val:        "\"",
																																										ignoreCase: false,
																																										want:       "\"\\\"\"",
																																									},
																																									&zeroOrMoreExpr{
																																										pos: position{line: 163, col: 18, offset: 4141},
																																										expr: &choiceExpr{
																																											pos: position{line: 163, col: 20, offset: 4143},
																																											alternatives: []any{
																																												&seqExpr{
																																													pos: position{line: 163, col: 20, offset: 4143},
																																													exprs: []any{
																																														&notExpr{
																																															pos: position{line: 163, col: 20, offset: 4143},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 174, col: 15, offset: 4577},
																																																val:        "[\"\\\\\\x00-\\x1f]",
																																																chars:      []rune{'"', '\\'},
																																																ranges:     []rune{'\x00', '\x1f'},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																														&anyMatcher{
																																															line: 163, col: 33, offset: 4156,
																																														},
																																													},
																																												},
																																												&seqExpr{
																																													pos: position{line: 163, col: 37, offset: 4160},
																																													exprs: []any{
																																														&litMatcher{
																																															pos:        position{line: 163, col: 37, offset: 4160},
																																															val:        "\\",
																																															ignoreCase: false,
																																															want:       "\"\\\\\"",
																																														},
																																														&choiceExpr{
																																															pos: position{line: 175, col: 18, offset: 4612},
																																															alternatives: []any{
																																																&charClassMatcher{
																																																	pos:        position{line: 176, col: 20, offset: 4667},
																																																	val:        "[\"\\\\/bfnrt]",
																																																	chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&seqExpr{
																																																	pos: position{line: 177, col: 17, offset: 4698},
																																																	exprs: []any{
																																																		&litMatcher{
																																																			pos:        position{line: 177, col: 17, offset: 4698},
																																																			val:        "u",
																																																			ignoreCase: false,
																																																			want:       "\"u\"",
																																																		},
																																																		&charClassMatcher{
																																																			pos:        position{line: 180, col: 12, offset: 4807},
																																																			val:        "[0-9a-f]i",
																																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																																			ignoreCase: true,
																																																			inverted:   false,
																																																		},
																																																		&charClassMatcher{
																																																			pos:        position{line: 180, col: 12, offset: 4807},
																																																			val:        "[0-9a-f]i",
																																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																																			ignoreCase: true,
																																																			inverted:   false,
																																																		},
																																																		&charClassMatcher{
																																																			pos:        position{line: 180, col: 12, offset: 4807},
																																																			val:        "[0-9a-f]i",
																																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																																			ignoreCase: true,
																																																			inverted:   false,
																																																		},
																																																		&charClassMatcher{
																																																			pos:        position{line: 180, col: 12, offset: 4807},
																																																			val:        "[0-9a-f]i",
																																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																																			ignoreCase: true,
																																																			inverted:   false,
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 163, col: 60, offset: 4183},
																																										val:        "\"",
																																										ignoreCase: false,
																																										want:       "\"\\\"\"",
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 164, col: 14, offset: 4201},
																																								exprs: []any{
																																									&litMatcher{
																																										pos:        position{line: 164, col: 14, offset: 4201},
																																										val:        "'",
																																										ignoreCase: false,
																																										want:       "\"'\"",
																																									},
																																									&zeroOrMoreExpr{
																																										pos: position{line: 164, col: 19, offset: 4206},
																																										expr: &choiceExpr{
																																											pos: position{line: 164, col: 21, offset: 4208},
																																											alternatives: []any{
																																												&seqExpr{
																																													pos: position{line: 164, col: 21, offset: 4208},
																																													exprs: []any{
																																														&notExpr{
																																															pos: position{line: 164, col: 21, offset: 4208},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 166, col: 16, offset: 4275},
																																																val:        "[\\\\\\\\x00-\\x1f]",
																																																chars:      []rune{'\'', '\\'},
																																																ranges:     []rune{'\x00', '\x1f'},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																														&anyMatcher{
																																															line: 164, col: 35, offset: 4222,
																																														},
																																													},
																																												},
																																												&seqExpr{
																																													pos: position{line: 164, col: 39, offset: 4226},
																																													exprs: []any{
																																														&litMatcher{
																																															pos:        position{line: 164, col: 39, offset: 4226},
																																															val:        "\\",
																																															ignoreCase: false,
																																															want:       "\"\\\\\"",
																																														},
																																														&choiceExpr{
																																															pos: position{line: 167, col: 19, offset: 4311},
																																															alternatives: []any{
																																																&charClassMatcher{
																																																	pos:        position{line: 168, col: 21, offset: 4368},
																																																	val:        "[\\\\\\/bfnrt]",
																																																	chars:      []rune{'\'', '\\', '/', 'b', 'f', 'n', 'r', 't'},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&seqExpr{
																																																	pos: position{line: 177, col: 17, offset: 4698},
																																																	exprs: []any{
																																																		&litMatcher{
																																																			pos:        position{line: 177, col: 17, offset: 4698},
																																																			val:        "u",
																																																			ignoreCase: false,
																																																			want:       "\"u\"",
																																																		},
																																																		&charClassMatcher{
																																																			pos:        position{line: 180, col: 12, offset: 4807},
																																																			val:        "[0-9a-f]i",
																																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																																			ignoreCase: true,
																																																			inverted:   false,
																																																		},
																																																		&charClassMatcher{
																																																			pos:        position{line: 180, col: 12, offset: 4807},
																																																			val:        "[0-9a-f]i",
																																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																																			ignoreCase: true,
																																																			inverted:   false,
																																																		},
																																																		&charClassMatcher{
																																																			pos:        position{line: 180, col: 12, offset: 4807},
																																																			val:        "[0-9a-f]i",
																																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																																			ignoreCase: true,
																																																			inverted:   false,
																																																		},
																																																		&charClassMatcher{
																																																			pos:        position{line: 180, col: 12, offset: 4807},
																																																			val:        "[0-9a-f]i",
																																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																																			ignoreCase: true,
																																																			inverted:   false,
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 164, col: 63, offset: 4250},
																																										val:        "'",
																																										ignoreCase: false,
																																										want:       "\"'\"",
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 161, col: 29, offset: 4073},
																																								exprs: []any{
																																									&litMatcher{
																																										pos:        position{line: 161, col: 29, offset: 4073},
																																										val:        "`",
																																										ignoreCase: false,
																																										want:       "\"`\"",
																																									},
																																									&zeroOrMoreExpr{
																																										pos: position{line: 161, col: 33, offset: 4077},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 161, col: 33, offset: 4077},
																																											val:        "[^`]",
																																											chars:      []rune{'`'},
																																											ignoreCase: false,
																																											inverted:   true,
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 161, col: 39, offset: 4083},
																																										val:        "`",
																																										ignoreCase: false,
																																										want:       "\"`\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 149, col: 37, offset: 3681},
																																	label: "rest",
																																	expr: &zeroOrMoreExpr{
																																		pos: position{line: 149, col: 43, offset: 3687},
																																		expr: &actionExpr{
																																			pos: position{line: 151, col: 26, offset: 3785},
																																			run: (*parser).calloninput151,
																																			expr: &seqExpr{
																																				pos: position{line: 151, col: 26, offset: 3785},
																																				exprs: []any{
																																					&zeroOrMoreExpr{
																																						pos: position{line: 196, col: 20, offset: 5219},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 196, col: 20, offset: 5219},
																																							val:        "[ \\n\\t\\r]",
																																							chars:      []rune{' ', '\n', '\t', '\r'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 151, col: 29, offset: 3788},
																																						val:        ",",
																																						ignoreCase: false,
																																						want:       "\",\"",
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 196, col: 20, offset: 5219},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 196, col: 20, offset: 5219},
																																							val:        "[ \\n\\t\\r]",
																																							chars:      []rune{' ', '\n', '\t', '\r'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 151, col: 36, offset: 3795},
																																						label: "e",
																																						expr: &actionExpr{
																																							pos: position{line: 154, col: 13, offset: 3895},
																																							run: (*parser).calloninput159,
																																							expr: &choiceExpr{
																																								pos: position{line: 156, col: 14, offset: 3952},
																																								alternatives: []any{
																																									&actionExpr{
																																										pos: position{line: 186, col: 15, offset: 4906},
																																										run: (*parser).calloninput161,
																																										expr: &seqExpr{
																																											pos: position{line: 186, col: 15, offset: 4906},
																																											exprs: []any{
																																												&charClassMatcher{
																																													pos:        position{line: 191, col: 13, offset: 5003},
																																													val:        "[_\\pL\\pOther_ID_Start]",
																																													chars:      []rune{'_'},
																																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 186, col: 24, offset: 4915},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 194, col: 16, offset: 5120},
																																														val:        "[\\pL\\pOther_ID_Start\\pNl\\pMn\\pMc\\pNd\\pPc\\pOther_ID_Continue]",
																																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start"), rangeTable("Nl"), rangeTable("Mn"), rangeTable("Mc"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Other_ID_Continue")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 182, col: 12, offset: 4831},
																																										run: (*parser).calloninput166,
																																										expr: &seqExpr{
																																											pos: position{line: 182, col: 12, offset: 4831},
																																											exprs: []any{
																																												&zeroOrOneExpr{
																																													pos: position{line: 182, col: 12, offset: 4831},
																																													expr: &litMatcher{
																																														pos:        position{line: 182, col: 12, offset: 4831},
																																														val:        "-",
																																														ignoreCase: false,
																																														want:       "\"-\"",
																																													},
																																												},
																																												&oneOrMoreExpr{
																																													pos: position{line: 182, col: 17, offset: 4836},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 182, col: 17, offset: 4836},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&seqExpr{
																																										pos: position{line: 158, col: 14, offset: 3999},
																																										exprs: []any{
																																											&zeroOrMoreExpr{
																																												pos: position{line: 158, col: 14, offset: 3999},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 158, col: 14, offset: 3999},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 158, col: 21, offset: 4006},
																																												val:        ".",
																																												ignoreCase: false,
																																												want:       "\".\"",
																																											},
																																											&oneOrMoreExpr{
																																												pos: position{line: 158, col: 25, offset: 4010},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 158, col: 25, offset: 4010},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 161, col: 15, offset: 4059},
																																										run: (*parser).calloninput178,
																																										expr: &choiceExpr{
																																											pos: position{line: 161, col: 16, offset: 4060},
																																											alternatives: []any{
																																												&seqExpr{
																																													pos: position{line: 163, col: 14, offset: 4137},
																																													exprs: []any{
																																														&litMatcher{
																																															pos:        position{line: 163, col: 14, offset: 4137},
																																															val:        "\"",
																																															ignoreCase: false,
																																															want:       "\"\\\"\"",
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 163, col: 18, offset: 4141},
																																															expr: &choiceExpr{
																																																pos: position{line: 163, col: 20, offset: 4143},
																																																alternatives: []any{
																																																	&seqExpr{
																																																		pos: position{line: 163, col: 20, offset: 4143},
																																																		exprs: []any{
																																																			&notExpr{
																																																				pos: position{line: 163, col: 20, offset: 4143},
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 174, col: 15, offset: 4577},
																																																					val:        "[\"\\\\\\x00-\\x1f]",
																																																					chars:      []rune{'"', '\\'},
																																																					ranges:     []rune{'\x00', '\x1f'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&anyMatcher{
																																																				line: 163, col: 33, offset: 4156,
																																																			},
																																																		},
																																																	},
																																																	&seqExpr{
																																																		pos: position{line: 163, col: 37, offset: 4160},
																																																		exprs: []any{
																																																			&litMatcher{
																																																				pos:        position{line: 163, col: 37, offset: 4160},
																																																				val:        "\\",
																																																				ignoreCase: false,
																																																				want:       "\"\\\\\"",
																																																			},
																																																			&choiceExpr{
																																																				pos: position{line: 175, col: 18, offset: 4612},
																																																				alternatives: []any{
																																																					&charClassMatcher{
																																																						pos:        position{line: 176, col: 20, offset: 4667},
																																																						val:        "[\"\\\\/bfnrt]",
																																																						chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																					&seqExpr{
																																																						pos: position{line: 177, col: 17, offset: 4698},
																																																						exprs: []any{
																																																							&litMatcher{
																																																								pos:        position{line: 177, col: 17, offset: 4698},
																																																								val:        "u",
																																																								ignoreCase: false,
																																																								want:       "\"u\"",
																																																							},
																																																							&charClassMatcher{
																																																								pos:        position{line: 180, col: 12, offset: 4807},
																																																								val:        "[0-9a-f]i",
																																																								ranges:     []rune{'0', '9', 'a', 'f'},
																																																								ignoreCase: true,
																																																								inverted:   false,
																																																							},
																																																							&charClassMatcher{
																																																								pos:        position{line: 180, col: 12, offset: 4807},
																																																								val:        "[0-9a-f]i",
																																																								ranges:     []rune{'0', '9', 'a', 'f'},
																																																								ignoreCase: true,
																																																								inverted:   false,
																																																							},
																																																							&charClassMatcher{
																																																								pos:        position{line: 180, col: 12, offset: 4807},
																																																								val:        "[0-9a-f]i",
																																																								ranges:     []rune{'0', '9', 'a', 'f'},
																																																								ignoreCase: true,
																																																								inverted:   false,
																																																							},
																																																							&charClassMatcher{
																																																								pos:        position{line: 180, col: 12, offset: 4807},
																																																								val:        "[0-9a-f]i",
																																																								ranges:     []rune{'0', '9', 'a', 'f'},
																																																								ignoreCase: true,
																																																								inverted:   false,
																																																							},
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&litMatcher{
																																															pos:        position{line: 163, col: 60, offset: 4183},
																																															val:        "\"",
																																															ignoreCase: false,
																																															want:       "\"\\\"\"",
																																														},
																																													},
																																												},
																																												&seqExpr{
																																													pos: position{line: 164, col: 14, offset: 4201},
																																													exprs: []any{
																																														&litMatcher{
																																															pos:        position{line: 164, col: 14, offset: 4201},
																																															val:        "'",
																																															ignoreCase: false,
																																															want:       "\"'\"",
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 164, col: 19, offset: 4206},
																																															expr: &choiceExpr{
																																																pos: position{line: 164, col: 21, offset: 4208},
																																																alternatives: []any{
																																																	&seqExpr{
																																																		pos: position{line: 164, col: 21, offset: 4208},
																																																		exprs: []any{
																																																			&notExpr{
																																																				pos: position{line: 164, col: 21, offset: 4208},
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 166, col: 16, offset: 4275},
																																																					val:        "[\\\\\\\\x00-\\x1f]",
																																																					chars:      []rune{'\'', '\\'},
																																																					ranges:     []rune{'\x00', '\x1f'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&anyMatcher{
																																																				line: 164, col: 35, offset: 4222,
																																																			},
																																																		},
																																																	},
																																																	&seqExpr{
																																																		pos: position{line: 164, col: 39, offset: 4226},
																																																		exprs: []any{
																																																			&litMatcher{
																																																				pos:        position{line: 164, col: 39, offset: 4226},
																																																				val:        "\\",
																																																				ignoreCase: false,
																																																				want:       "\"\\\\\"",
																																																			},
																																																			&choiceExpr{
																																																				pos: position{line: 167, col: 19, offset: 4311},
																																																				alternatives: []any{
																																																					&charClassMatcher{
																																																						pos:        position{line: 168, col: 21, offset: 4368},
																																																						val:        "[\\\\\\/bfnrt]",
																																																						chars:      []rune{'\'', '\\', '/', 'b', 'f', 'n', 'r', 't'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																					&seqExpr{
																																																						pos: position{line: 177, col: 17, offset: 4698},
																																																						exprs: []any{
																																																							&litMatcher{
																																																								pos:        position{line: 177, col: 17, offset: 4698},
																																																								val:        "u",
																																																								ignoreCase: false,
																																																								want:       "\"u\"",
																																																							},
																																																							&charClassMatcher{
																																																								pos:        position{line: 180, col: 12, offset: 4807},
																																																								val:        "[0-9a-f]i",
																																																								ranges:     []rune{'0', '9', 'a', 'f'},
																																																								ignoreCase: true,
																																																								inverted:   false,
																																																							},
																																																							&charClassMatcher{
																																																								pos:        position{line: 180, col: 12, offset: 4807},
																																																								val:        "[0-9a-f]i",
																																																								ranges:     []rune{'0', '9', 'a', 'f'},
																																																								ignoreCase: true,
																																																								inverted:   false,
																																																							},
																																																							&charClassMatcher{
																																																								pos:        position{line: 180, col: 12, offset: 4807},
																																																								val:        "[0-9a-f]i",
																																																								ranges:     []rune{'0', '9', 'a', 'f'},
																																																								ignoreCase: true,
																																																								inverted:   false,
																																																							},
																																																							&charClassMatcher{
																																																								pos:        position{line: 180, col: 12, offset: 4807},
																																																								val:        "[0-9a-f]i",
																																																								ranges:     []rune{'0', '9', 'a', 'f'},
																																																								ignoreCase: true,
																																																								inverted:   false,
																																																							},
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&litMatcher{
																																															pos:        position{line: 164, col: 63, offset: 4250},
																																															val:        "'",
																																															ignoreCase: false,
																																															want:       "\"'\"",
																																														},
																																													},
																																												},
																																												&seqExpr{
																																													pos: position{line: 161, col: 29, offset: 4073},
																																													exprs: []any{
																																														&litMatcher{
																																															pos:        position{line: 161, col: 29, offset: 4073},
																																															val:        "`",
																																															ignoreCase: false,
																																															want:       "\"`\"",
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 161, col: 33, offset: 4077},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 161, col: 33, offset: 4077},
																																																val:        "[^`]",
																																																chars:      []rune{'`'},
																																																ignoreCase: false,
																																																inverted:   true,
																																															},
																																														},
																																														&litMatcher{
																																															pos:        position{line: 161, col: 39, offset: 4083},
																																															val:        "`",
																																															ignoreCase: false,
																																															want:       "\"`\"",
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 149, col: 67, offset: 3711},
																																	val:        ")",
																																	ignoreCase: false,
																																	want:       "\")\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 196, col: 20, offset: 5219},
																											expr: &charClassMatcher{
																												pos:        position{line: 196, col: 20, offset: 5219},
																												val:        "[ \\n\\t\\r]",
																												chars:      []rune{' ', '\n', '\t', '\r'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 125, col: 18, offset: 2930},
																								run: (*parser).calloninput226,
																								expr: &seqExpr{
																									pos: position{line: 125, col: 18, offset: 2930},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 125, col: 18, offset: 2930},
																											val:        "@{",
																											ignoreCase: false,
																											want:       "\"@{\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 125, col: 23, offset: 2935},
																											label: "code",
																											expr: &actionExpr{
																												pos: position{line: 145, col: 24, offset: 3520},
																												run: (*parser).calloninput230,
																												expr: &zeroOrMoreExpr{
																													pos: position{line: 145, col: 26, offset: 3522},
																													expr: &seqExpr{
																														pos: position{line: 145, col: 28, offset: 3524},
																														exprs: []any{
																															&notExpr{
																																pos: position{line: 145, col: 28, offset: 3524},
																																expr: &litMatcher{
																																	pos:        position{line: 145, col: 29, offset: 3525},
																																	val:        "}!",
																																	ignoreCase: false,
																																	want:       "\"}!\"",
																																},
																															},
																															&anyMatcher{
																																line: 145, col: 34, offset: 3530,
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 125, col: 48, offset: 2960},
																											val:        "}!",
																											ignoreCase: false,
																											want:       "\"}!\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 196, col: 20, offset: 5219},
																											expr: &charClassMatcher{
																												pos:        position{line: 196, col: 20, offset: 5219},
																												val:        "[ \\n\\t\\r]",
																												chars:      []rune{' ', '\n', '\t', '\r'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 134, col: 18, offset: 3220},
																								run: (*parser).calloninput239,
																								expr: &labeledExpr{
																									pos:   position{line: 134, col: 18, offset: 3220},
																									label: "text",
																									expr: &actionExpr{
																										pos: position{line: 133, col: 22, offset: 3148},
																										run: (*parser).calloninput241,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 133, col: 22, offset: 3148},
																											expr: &seqExpr{
																												pos: position{line: 133, col: 24, offset: 3150},
																												exprs: []any{
																													&notExpr{
																														pos: position{line: 133, col: 24, offset: 3150},
																														expr: &charClassMatcher{
																															pos:        position{line: 133, col: 25, offset: 3151},
																															val:        "[:@]",
																															chars:      []rune{':', '@'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 133, col: 30, offset: 3156},
																														expr: &charClassMatcher{
																															pos:        position{line: 133, col: 30, offset: 3156},
																															val:        "[^\\r\\n]",
																															chars:      []rune{'\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																													&charClassMatcher{
																														pos:        position{line: 200, col: 7, offset: 5259},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 196, col: 20, offset: 5219},
																				expr: &charClassMatcher{
																					pos:        position{line: 196, col: 20, offset: 5219},
																					val:        "[ \\n\\t\\r]",
																					chars:      []rune{' ', '\n', '\t', '\r'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 90, col: 14, offset: 2023},
													run: (*parser).calloninput251,
													expr: &seqExpr{
														pos: position{line: 90, col: 14, offset: 2023},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 90, col: 14, offset: 2023},
																val:        ":",
																ignoreCase: false,
																want:       "\":\"",
															},
															&labeledExpr{
																pos:   position{line: 90, col: 18, offset: 2027},
																label: "name",
																expr: &zeroOrOneExpr{
																	pos: position{line: 90, col: 23, offset: 2032},
																	expr: &actionExpr{
																		pos: position{line: 186, col: 15, offset: 4906},
																		run: (*parser).calloninput256,
																		expr: &seqExpr{
																			pos: position{line: 186, col: 15, offset: 4906},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 191, col: 13, offset: 5003},
																					val:        "[_\\pL\\pOther_ID_Start]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 186, col: 24, offset: 4915},
																					expr: &charClassMatcher{
																						pos:        position{line: 194, col: 16, offset: 5120},
																						val:        "[\\pL\\pOther_ID_Start\\pNl\\pMn\\pMc\\pNd\\pPc\\pOther_ID_Continue]",
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start"), rangeTable("Nl"), rangeTable("Mn"), rangeTable("Mc"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Other_ID_Continue")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 198, col: 11, offset: 5243},
																expr: &charClassMatcher{
																	pos:        position{line: 198, col: 11, offset: 5243},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&charClassMatcher{
																pos:        position{line: 200, col: 7, offset: 5259},
																val:        "[\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
															&labeledExpr{
																pos:   position{line: 90, col: 45, offset: 2054},
																label: "lines",
																expr: &actionExpr{
																	pos: position{line: 109, col: 14, offset: 2458},
																	run: (*parser).calloninput265,
																	expr: &seqExpr{
																		pos: position{line: 109, col: 14, offset: 2458},
																		exprs: []any{
																			&labeledExpr{
																				pos:   position{line: 109, col: 14, offset: 2458},
																				label: "lines",
																				expr: &zeroOrMoreExpr{
																					pos: position{line: 109, col: 20, offset: 2464},
																					expr: &choiceExpr{
																						pos: position{line: 111, col: 13, offset: 2514},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 113, col: 24, offset: 2608},
																								run: (*parser).calloninput270,
																								expr: &seqExpr{
																									pos: position{line: 113, col: 24, offset: 2608},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 113, col: 24, offset: 2608},
																											val:        "@#",
																											ignoreCase: false,
																											want:       "\"@#\"",
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 113, col: 32, offset: 2616},
																											expr: &seqExpr{
																												pos: position{line: 113, col: 33, offset: 2617},
																												exprs: []any{
																													&notExpr{
																														pos: position{line: 113, col: 33, offset: 2617},
																														expr: &charClassMatcher{
																															pos:        position{line: 200, col: 7, offset: 5259},
																															val:        "[\\r\\n]",
																															chars:      []rune{'\r', '\n'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&anyMatcher{
																														line: 113, col: 37, offset: 2621,
																													},
																												},
																											},
																										},
																										&charClassMatcher{
																											pos:        position{line: 200, col: 7, offset: 5259},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 196, col: 20, offset: 5219},
																											expr: &charClassMatcher{
																												pos:        position{line: 196, col: 20, offset: 5219},
																												val:        "[ \\n\\t\\r]",
																												chars:      []rune{' ', '\n', '\t', '\r'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 115, col: 18, offset: 2671},
																								run: (*parser).calloninput281,
																								expr: &seqExpr{
																									pos: position{line: 115, col: 18, offset: 2671},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 115, col: 18, offset: 2671},
																											val:        "@",
																											ignoreCase: false,
																											want:       "\"@\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 115, col: 22, offset: 2675},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 186, col: 15, offset: 4906},
																												run: (*parser).calloninput285,
																												expr: &seqExpr{
																													pos: position{line: 186, col: 15, offset: 4906},
																													exprs: []any{
																														&charClassMatcher{
																															pos:        position{line: 191, col: 13, offset: 5003},
																															val:        "[_\\pL\\pOther_ID_Start]",
																															chars:      []rune{'_'},
																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 186, col: 24, offset: 4915},
																															expr: &charClassMatcher{
																																pos:        position{line: 194, col: 16, offset: 5120},
																																val:        "[\\pL\\pOther_ID_Start\\pNl\\pMn\\pMc\\pNd\\pPc\\pOther_ID_Continue]",
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start"), rangeTable("Nl"), rangeTable("Mn"), rangeTable("Mc"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Other_ID_Continue")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 115, col: 38, offset: 2691},
																											label: "params",
																											expr: &choiceExpr{
																												pos: position{line: 148, col: 15, offset: 3606},
																												alternatives: []any{
																													&actionExpr{
																														pos: position{line: 148, col: 15, offset: 3606},
																														run: (*parser).calloninput292,
																														expr: &seqExpr{
																															pos: position{line: 148, col: 15, offset: 3606},
																															exprs: []any{
																																&litMatcher{
																																	pos:        position{line: 148, col: 15, offset: 3606},
																																	val:        "(",
																																	ignoreCase: false,
																																	want:       "\"(\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 196, col: 20, offset: 5219},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 196, col: 20, offset: 5219},
																																		val:        "[ \\n\\t\\r]",
																																		chars:      []rune{' ', '\n', '\t', '\r'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 148, col: 22, offset: 3613},
																																	val:        ")",
																																	ignoreCase: false,
																																	want:       "\")\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 149, col: 15, offset: 3659},
																														run: (*parser).calloninput298,
																														expr: &seqExpr{
																															pos: position{line: 149, col: 15, offset: 3659},
																															exprs: []any{
																																&litMatcher{
																																	pos:        position{line: 149, col: 15, offset: 3659},
																																	val:        "(",
																																	ignoreCase: false,
																																	want:       "\"(\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 196, col: 20, offset: 5219},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 196, col: 20, offset: 5219},
																																		val:        "[ \\n\\t\\r]",
																																		chars:      []rune{' ', '\n', '\t', '\r'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 149, col: 22, offset: 3666},
																																	label: "first",
																																	expr: &actionExpr{
																																		pos: position{line: 154, col: 13, offset: 3895},
																																		run: (*parser).calloninput304,
																																		expr: &choiceExpr{
																																			pos: position{line: 156, col: 14, offset: 3952},
																																			alternatives: []any{
																																				&actionExpr{
																																					pos: position{line: 186, col: 15, offset: 4906},
																																					run: (*parser).calloninput306,
																																					expr: &seqExpr{
																																						pos: position{line: 186, col: 15, offset: 4906},
																																						exprs: []any{
																																							&charClassMatcher{
																																								pos:        position{line: 191, col: 13, offset: 5003},
																																								val:        "[_\\pL\\pOther_ID_Start]",
																																								chars:      []rune{'_'},
																																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 186, col: 24, offset: 4915},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 194, col: 16, offset: 5120},
																																									val:        "[\\pL\\pOther_ID_Start\\pNl\\pMn\\pMc\\pNd\\pPc\\pOther_ID_Continue]",
																																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start"), rangeTable("Nl"), rangeTable("Mn"), rangeTable("Mc"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Other_ID_Continue")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 182, col: 12, offset: 4831},
																																					run: (*parser).calloninput311,
																																					expr: &seqExpr{
																																						pos: position{line: 182, col: 12, offset: 4831},
																																						exprs: []any{
																																							&zeroOrOneExpr{
																																								pos: position{line: 182, col: 12, offset: 4831},
																																								expr: &litMatcher{
																																									pos:        position{line: 182, col: 12, offset: 4831},
																																									val:        "-",
																																									ignoreCase: false,
																																									want:       "\"-\"",
																																								},
																																							},
																																							&oneOrMoreExpr{
																																								pos: position{line: 182, col: 17, offset: 4836},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 182, col: 17, offset: 4836},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&seqExpr{
																																					pos: position{line: 158, col: 14, offset: 3999},
																																					exprs: []any{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 158, col: 14, offset: 3999},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 158, col: 14, offset: 3999},
																																								val:        "[0-9]",
																																								ranges:     []rune{'0', '9'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 158, col: 21, offset: 4006},
																																							val:        ".",
																																							ignoreCase: false,
																																							want:       "\".\"",
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 158, col: 25, offset: 4010},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 158, col: 25, offset: 4010},
																																								val:        "[0-9]",
																																								ranges:     []rune{'0', '9'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 161, col: 15, offset: 4059},
																																					run: (*parser).calloninput323,
																																					expr: &choiceExpr{
																																						pos: position{line: 161, col: 16, offset: 4060},
																																						alternatives: []any{
																																							&seqExpr{
																																								pos: position{line: 163, col: 14, offset: 4137},
																																								exprs: []any{
																																									&litMatcher{
																																										pos:        position{line: 163, col: 14, offset: 4137},
																																										val:        "\"",
																																										ignoreCase: false,
																																										want:       "\"\\\"\"",
																																									},
																																									&zeroOrMoreExpr{
																																										pos: position{line: 163, col: 18, offset: 4141},
																																										expr: &choiceExpr{
																																											pos: position{line: 163, col: 20, offset: 4143},
																																											alternatives: []any{
																																												&seqExpr{
																																													pos: position{line: 163, col: 20, offset: 4143},
																																													exprs: []any{
																																														&notExpr{
																																															pos: position{line: 163, col: 20, offset: 4143},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 174, col: 15, offset: 4577},
																																																val:        "[\"\\\\\\x00-\\x1f]",
																																																chars:      []rune{'"', '\\'},
																																																ranges:     []rune{'\x00', '\x1f'},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																														&anyMatcher{
																																															line: 163, col: 33, offset: 4156,
																																														},
																																													},
																																												},
																																												&seqExpr{
																																													pos: position{line: 163, col: 37, offset: 4160},
																																													exprs: []any{
																																														&litMatcher{
																																															pos:        position{line: 163, col: 37, offset: 4160},
																																															val:        "\\",
																																															ignoreCase: false,
																																															want:       "\"\\\\\"",
																																														},
																																														&choiceExpr{
																																															pos: position{line: 175, col: 18, offset: 4612},
																																															alternatives: []any{
																																																&charClassMatcher{
																																																	pos:        position{line: 176, col: 20, offset: 4667},
																																																	val:        "[\"\\\\/bfnrt]",
																																																	chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&seqExpr{
																																																	pos: position{line: 177, col: 17, offset: 4698},
																																																	exprs: []any{
																																																		&litMatcher{
																																																			pos:        position{line: 177, col: 17, offset: 4698},
																																																			val:        "u",
																																																			ignoreCase: false,
																																																			want:       "\"u\"",
																																																		},
																																																		&charClassMatcher{
																																																			pos:        position{line: 180, col: 12, offset: 4807},
																																																			val:        "[0-9a-f]i",
																																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																																			ignoreCase: true,
																																																			inverted:   false,
																																																		},
																																																		&charClassMatcher{
																																																			pos:        position{line: 180, col: 12, offset: 4807},
																																																			val:        "[0-9a-f]i",
																																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																																			ignoreCase: true,
																																																			inverted:   false,
																																																		},
																																																		&charClassMatcher{
																																																			pos:        position{line: 180, col: 12, offset: 4807},
																																																			val:        "[0-9a-f]i",
																																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																																			ignoreCase: true,
																																																			inverted:   false,
																																																		},
																																																		&charClassMatcher{
																																																			pos:        position{line: 180, col: 12, offset: 4807},
																																																			val:        "[0-9a-f]i",
																																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																																			ignoreCase: true,
																																																			inverted:   false,
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 163, col: 60, offset: 4183},
																																										val:        "\"",
																																										ignoreCase: false,
																																										want:       "\"\\\"\"",
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 164, col: 14, offset: 4201},
																																								exprs: []any{
																																									&litMatcher{
																																										pos:        position{line: 164, col: 14, offset: 4201},
																																										val:        "'",
																																										ignoreCase: false,
																																										want:       "\"'\"",
																																									},
																																									&zeroOrMoreExpr{
																																										pos: position{line: 164, col: 19, offset: 4206},
																																										expr: &choiceExpr{
																																											pos: position{line: 164, col: 21, offset: 4208},
																																											alternatives: []any{
																																												&seqExpr{
																																													pos: position{line: 164, col: 21, offset: 4208},
																																													exprs: []any{
																																														&notExpr{
																																															pos: position{line: 164, col: 21, offset: 4208},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 166, col: 16, offset: 4275},
																																																val:        "[\\\\\\\\x00-\\x1f]",
																																																chars:      []rune{'\'', '\\'},
																																																ranges:     []rune{'\x00', '\x1f'},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																														&anyMatcher{
																																															line: 164, col: 35, offset: 4222,
																																														},
																																													},
																																												},
																																												&seqExpr{
																																													pos: position{line: 164, col: 39, offset: 4226},
																																													exprs: []any{
																																														&litMatcher{
																																															pos:        position{line: 164, col: 39, offset: 4226},
																																															val:        "\\",
																																															ignoreCase: false,
																																															want:       "\"\\\\\"",
																																														},
																																														&choiceExpr{
																																															pos: position{line: 167, col: 19, offset: 4311},
																																															alternatives: []any{
																																																&charClassMatcher{
																																																	pos:        position{line: 168, col: 21, offset: 4368},
																																																	val:        "[\\\\\\/bfnrt]",
																																																	chars:      []rune{'\'', '\\', '/', 'b', 'f', 'n', 'r', 't'},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&seqExpr{
																																																	pos: position{line: 177, col: 17, offset: 4698},
																																																	exprs: []any{
																																																		&litMatcher{
																																																			pos:        position{line: 177, col: 17, offset: 4698},
																																																			val:        "u",
																																																			ignoreCase: false,
																																																			want:       "\"u\"",
																																																		},
																																																		&charClassMatcher{
																																																			pos:        position{line: 180, col: 12, offset: 4807},
																																																			val:        "[0-9a-f]i",
																																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																																			ignoreCase: true,
																																																			inverted:   false,
																																																		},
																																																		&charClassMatcher{
																																																			pos:        position{line: 180, col: 12, offset: 4807},
																																																			val:        "[0-9a-f]i",
																																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																																			ignoreCase: true,
																																																			inverted:   false,
																																																		},
																																																		&charClassMatcher{
																																																			pos:        position{line: 180, col: 12, offset: 4807},
																																																			val:        "[0-9a-f]i",
																																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																																			ignoreCase: true,
																																																			inverted:   false,
																																																		},
																																																		&charClassMatcher{
																																																			pos:        position{line: 180, col: 12, offset: 4807},
																																																			val:        "[0-9a-f]i",
																																																			ranges:     []rune{'0', '9', 'a', 'f'},
																																																			ignoreCase: true,
																																																			inverted:   false,
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 164, col: 63, offset: 4250},
																																										val:        "'",
																																										ignoreCase: false,
																																										want:       "\"'\"",
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 161, col: 29, offset: 4073},
																																								exprs: []any{
																																									&litMatcher{
																																										pos:        position{line: 161, col: 29, offset: 4073},
																																										val:        "`",
																																										ignoreCase: false,
																																										want:       "\"`\"",
																																									},
																																									&zeroOrMoreExpr{
																																										pos: position{line: 161, col: 33, offset: 4077},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 161, col: 33, offset: 4077},
																																											val:        "[^`]",
																																											chars:      []rune{'`'},
																																											ignoreCase: false,
																																											inverted:   true,
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 161, col: 39, offset: 4083},
																																										val:        "`",
																																										ignoreCase: false,
																																										want:       "\"`\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 149, col: 37, offset: 3681},
																																	label: "rest",
																																	expr: &zeroOrMoreExpr{
																																		pos: position{line: 149, col: 43, offset: 3687},
																																		expr: &actionExpr{
																																			pos: position{line: 151, col: 26, offset: 3785},
																																			run: (*parser).calloninput370,
																																			expr: &seqExpr{
																																				pos: position{line: 151, col: 26, offset: 3785},
																																				exprs: []any{
																																					&zeroOrMoreExpr{
																																						pos: position{line: 196, col: 20, offset: 5219},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 196, col: 20, offset: 5219},
																																							val:        "[ \\n\\t\\r]",
																																							chars:      []rune{' ', '\n', '\t', '\r'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 151, col: 29, offset: 3788},
																																						val:        ",",
																																						ignoreCase: false,
																																						want:       "\",\"",
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 196, col: 20, offset: 5219},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 196, col: 20, offset: 5219},
																																							val:        "[ \\n\\t\\r]",
																																							chars:      []rune{' ', '\n', '\t', '\r'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 151, col: 36, offset: 3795},
																																						label: "e",
																																						expr: &actionExpr{
																																							pos: position{line: 154, col: 13, offset: 3895},
																																							run: (*parser).calloninput378,
																																							expr: &choiceExpr{
																																								pos: position{line: 156, col: 14, offset: 3952},
																																								alternatives: []any{
																																									&actionExpr{
																																										pos: position{line: 186, col: 15, offset: 4906},
																																										run: (*parser).calloninput380,
																																										expr: &seqExpr{
																																											pos: position{line: 186, col: 15, offset: 4906},
																																											exprs: []any{
																																												&charClassMatcher{
																																													pos:        position{line: 191, col: 13, offset: 5003},
																																													val:        "[_\\pL\\pOther_ID_Start]",
																																													chars:      []rune{'_'},
																																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 186, col: 24, offset: 4915},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 194, col: 16, offset: 5120},
																																														val:        "[\\pL\\pOther_ID_Start\\pNl\\pMn\\pMc\\pNd\\pPc\\pOther_ID_Continue]",
																																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start"), rangeTable("Nl"), rangeTable("Mn"), rangeTable("Mc"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Other_ID_Continue")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 182, col: 12, offset: 4831},
																																										run: (*parser).calloninput385,
																																										expr: &seqExpr{
																																											pos: position{line: 182, col: 12, offset: 4831},
																																											exprs: []any{
																																												&zeroOrOneExpr{
																																													pos: position{line: 182, col: 12, offset: 4831},
																																													expr: &litMatcher{
																																														pos:        position{line: 182, col: 12, offset: 4831},
																																														val:        "-",
																																														ignoreCase: false,
																																														want:       "\"-\"",
																																													},
																																												},
																																												&oneOrMoreExpr{
																																													pos: position{line: 182, col: 17, offset: 4836},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 182, col: 17, offset: 4836},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&seqExpr{
																																										pos: position{line: 158, col: 14, offset: 3999},
																																										exprs: []any{
																																											&zeroOrMoreExpr{
																																												pos: position{line: 158, col: 14, offset: 3999},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 158, col: 14, offset: 3999},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 158, col: 21, offset: 4006},
																																												val:        ".",
																																												ignoreCase: false,
																																												want:       "\".\"",
																																											},
																																											&oneOrMoreExpr{
																																												pos: position{line: 158, col: 25, offset: 4010},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 158, col: 25, offset: 4010},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 161, col: 15, offset: 4059},
																																										run: (*parser).calloninput397,
																																										expr: &choiceExpr{
																																											pos: position{line: 161, col: 16, offset: 4060},
																																											alternatives: []any{
																																												&seqExpr{
																																													pos: position{line: 163, col: 14, offset: 4137},
																																													exprs: []any{
																																														&litMatcher{
																																															pos:        position{line: 163, col: 14, offset: 4137},
																																															val:        "\"",
																																															ignoreCase: false,
																																															want:       "\"\\\"\"",
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 163, col: 18, offset: 4141},
																																															expr: &choiceExpr{
																																																pos: position{line: 163, col: 20, offset: 4143},
																																																alternatives: []any{
																																																	&seqExpr{
																																																		pos: position{line: 163, col: 20, offset: 4143},
																																																		exprs: []any{
																																																			&notExpr{
																																																				pos: position{line: 163, col: 20, offset: 4143},
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 174, col: 15, offset: 4577},
																																																					val:        "[\"\\\\\\x00-\\x1f]",
																																																					chars:      []rune{'"', '\\'},
																																																					ranges:     []rune{'\x00', '\x1f'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&anyMatcher{
																																																				line: 163, col: 33, offset: 4156,
																																																			},
																																																		},
																																																	},
																																																	&seqExpr{
																																																		pos: position{line: 163, col: 37, offset: 4160},
																																																		exprs: []any{
																																																			&litMatcher{
																																																				pos:        position{line: 163, col: 37, offset: 4160},
																																																				val:        "\\",
																																																				ignoreCase: false,
																																																				want:       "\"\\\\\"",
																																																			},
																																																			&choiceExpr{
																																																				pos: position{line: 175, col: 18, offset: 4612},
																																																				alternatives: []any{
																																																					&charClassMatcher{
																																																						pos:        position{line: 176, col: 20, offset: 4667},
																																																						val:        "[\"\\\\/bfnrt]",
																																																						chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																					&seqExpr{
																																																						pos: position{line: 177, col: 17, offset: 4698},
																																																						exprs: []any{
																																																							&litMatcher{
																																																								pos:        position{line: 177, col: 17, offset: 4698},
																																																								val:        "u",
																																																								ignoreCase: false,
																																																								want:       "\"u\"",
																																																							},
																																																							&charClassMatcher{
																																																								pos:        position{line: 180, col: 12, offset: 4807},
																																																								val:        "[0-9a-f]i",
																																																								ranges:     []rune{'0', '9', 'a', 'f'},
																																																								ignoreCase: true,
																																																								inverted:   false,
																																																							},
																																																							&charClassMatcher{
																																																								pos:        position{line: 180, col: 12, offset: 4807},
																																																								val:        "[0-9a-f]i",
																																																								ranges:     []rune{'0', '9', 'a', 'f'},
																																																								ignoreCase: true,
																																																								inverted:   false,
																																																							},
																																																							&charClassMatcher{
																																																								pos:        position{line: 180, col: 12, offset: 4807},
																																																								val:        "[0-9a-f]i",
																																																								ranges:     []rune{'0', '9', 'a', 'f'},
																																																								ignoreCase: true,
																																																								inverted:   false,
																																																							},
																																																							&charClassMatcher{
																																																								pos:        position{line: 180, col: 12, offset: 4807},
																																																								val:        "[0-9a-f]i",
																																																								ranges:     []rune{'0', '9', 'a', 'f'},
																																																								ignoreCase: true,
																																																								inverted:   false,
																																																							},
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&litMatcher{
																																															pos:        position{line: 163, col: 60, offset: 4183},
																																															val:        "\"",
																																															ignoreCase: false,
																																															want:       "\"\\\"\"",
																																														},
																																													},
																																												},
																																												&seqExpr{
																																													pos: position{line: 164, col: 14, offset: 4201},
																																													exprs: []any{
																																														&litMatcher{
																																															pos:        position{line: 164, col: 14, offset: 4201},
																																															val:        "'",
																																															ignoreCase: false,
																																															want:       "\"'\"",
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 164, col: 19, offset: 4206},
																																															expr: &choiceExpr{
																																																pos: position{line: 164, col: 21, offset: 4208},
																																																alternatives: []any{
																																																	&seqExpr{
																																																		pos: position{line: 164, col: 21, offset: 4208},
																																																		exprs: []any{
																																																			&notExpr{
																																																				pos: position{line: 164, col: 21, offset: 4208},
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 166, col: 16, offset: 4275},
																																																					val:        "[\\\\\\\\x00-\\x1f]",
																																																					chars:      []rune{'\'', '\\'},
																																																					ranges:     []rune{'\x00', '\x1f'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&anyMatcher{
																																																				line: 164, col: 35, offset: 4222,
																																																			},
																																																		},
																																																	},
																																																	&seqExpr{
																																																		pos: position{line: 164, col: 39, offset: 4226},
																																																		exprs: []any{
																																																			&litMatcher{
																																																				pos:        position{line: 164, col: 39, offset: 4226},
																																																				val:        "\\",
																																																				ignoreCase: false,
																																																				want:       "\"\\\\\"",
																																																			},
																																																			&choiceExpr{
																																																				pos: position{line: 167, col: 19, offset: 4311},
																																																				alternatives: []any{
																																																					&charClassMatcher{
																																																						pos:        position{line: 168, col: 21, offset: 4368},
																																																						val:        "[\\\\\\/bfnrt]",
																																																						chars:      []rune{'\'', '\\', '/', 'b', 'f', 'n', 'r', 't'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																					&seqExpr{
																																																						pos: position{line: 177, col: 17, offset: 4698},
																																																						exprs: []any{
																																																							&litMatcher{
																																																								pos:        position{line: 177, col: 17, offset: 4698},
																																																								val:        "u",
																																																								ignoreCase: false,
																																																								want:       "\"u\"",
																																																							},
																																																							&charClassMatcher{
																																																								pos:        position{line: 180, col: 12, offset: 4807},
																																																								val:        "[0-9a-f]i",
																																																								ranges:     []rune{'0', '9', 'a', 'f'},
																																																								ignoreCase: true,
																																																								inverted:   false,
																																																							},
																																																							&charClassMatcher{
																																																								pos:        position{line: 180, col: 12, offset: 4807},
																																																								val:        "[0-9a-f]i",
																																																								ranges:     []rune{'0', '9', 'a', 'f'},
																																																								ignoreCase: true,
																																																								inverted:   false,
																																																							},
																																																							&charClassMatcher{
																																																								pos:        position{line: 180, col: 12, offset: 4807},
																																																								val:        "[0-9a-f]i",
																																																								ranges:     []rune{'0', '9', 'a', 'f'},
																																																								ignoreCase: true,
																																																								inverted:   false,
																																																							},
																																																							&charClassMatcher{
																																																								pos:        position{line: 180, col: 12, offset: 4807},
																																																								val:        "[0-9a-f]i",
																																																								ranges:     []rune{'0', '9', 'a', 'f'},
																																																								ignoreCase: true,
																																																								inverted:   false,
																																																							},
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&litMatcher{
																																															pos:        position{line: 164, col: 63, offset: 4250},
																																															val:        "'",
																																															ignoreCase: false,
																																															want:       "\"'\"",
																																														},
																																													},
																																												},
																																												&seqExpr{
																																													pos: position{line: 161, col: 29, offset: 4073},
																																													exprs: []any{
																																														&litMatcher{
																																															pos:        position{line: 161, col: 29, offset: 4073},
																																															val:        "`",
																																															ignoreCase: false,
																																															want:       "\"`\"",
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 161, col: 33, offset: 4077},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 161, col: 33, offset: 4077},
																																																val:        "[^`]",
																																																chars:      []rune{'`'},
																																																ignoreCase: false,
																																																inverted:   true,
																																															},
																																														},
																																														&litMatcher{
																																															pos:        position{line: 161, col: 39, offset: 4083},
																																															val:        "`",
																																															ignoreCase: false,
																																															want:       "\"`\"",
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 149, col: 67, offset: 3711},
																																	val:        ")",
																																	ignoreCase: false,
																																	want:       "\")\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 196, col: 20, offset: 5219},
																											expr: &charClassMatcher{
																												pos:        position{line: 196, col: 20, offset: 5219},
																												val:        "[ \\n\\t\\r]",
																												chars:      []rune{' ', '\n', '\t', '\r'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 125, col: 18, offset: 2930},
																								run: (*parser).calloninput445,
																								expr: &seqExpr{
																									pos: position{line: 125, col: 18, offset: 2930},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 125, col: 18, offset: 2930},
																											val:        "@{",
																											ignoreCase: false,
																											want:       "\"@{\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 125, col: 23, offset: 2935},
																											label: "code",
																											expr: &actionExpr{
																												pos: position{line: 145, col: 24, offset: 3520},
																												run: (*parser).calloninput449,
																												expr: &zeroOrMoreExpr{
																													pos: position{line: 145, col: 26, offset: 3522},
																													expr: &seqExpr{
																														pos: position{line: 145, col: 28, offset: 3524},
																														exprs: []any{
																															&notExpr{
																																pos: position{line: 145, col: 28, offset: 3524},
																																expr: &litMatcher{
																																	pos:        position{line: 145, col: 29, offset: 3525},
																																	val:        "}!",
																																	ignoreCase: false,
																																	want:       "\"}!\"",
																																},
																															},
																															&anyMatcher{
																																line: 145, col: 34, offset: 3530,
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 125, col: 48, offset: 2960},
																											val:        "}!",
																											ignoreCase: false,
																											want:       "\"}!\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 196, col: 20, offset: 5219},
																											expr: &charClassMatcher{
																												pos:        position{line: 196, col: 20, offset: 5219},
																												val:        "[ \\n\\t\\r]",
																												chars:      []rune{' ', '\n', '\t', '\r'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 134, col: 18, offset: 3220},
																								run: (*parser).calloninput458,
																								expr: &labeledExpr{
																									pos:   position{line: 134, col: 18, offset: 3220},
																									label: "text",
																									expr: &actionExpr{
																										pos: position{line: 133, col: 22, offset: 3148},
																										run: (*parser).calloninput460,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 133, col: 22, offset: 3148},
																											expr: &seqExpr{
																												pos: position{line: 133, col: 24, offset: 3150},
																												exprs: []any{
																													&notExpr{
																														pos: position{line: 133, col: 24, offset: 3150},
																														expr: &charClassMatcher{
																															pos:        position{line: 133, col: 25, offset: 3151},
																															val:        "[:@]",
																															chars:      []rune{':', '@'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 133, col: 30, offset: 3156},
																														expr: &charClassMatcher{
																															pos:        position{line: 133, col: 30, offset: 3156},
																															val:        "[^\\r\\n]",
																															chars:      []rune{'\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																													&charClassMatcher{
																														pos:        position{line: 200, col: 7, offset: 5259},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 196, col: 20, offset: 5219},
																				expr: &charClassMatcher{
																					pos:        position{line: 196, col: 20, offset: 5219},
																					val:        "[ \\n\\t\\r]",
																					chars:      []rune{' ', '\n', '\t', '\r'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 47, col: 21, offset: 970},
							expr: &anyMatcher{
								line: 47, col: 22, offset: 971,
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) oninput15() (any, error) {

	return string(c.text), nil
}

func (p *parser) calloninput15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput15()
}

func (c *current) oninput26() (any, error) {
	return string(c.text), nil
}

func (p *parser) calloninput26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput26()
}

func (c *current) oninput21(cond any) (any, error) {
	return cond, nil
}

func (p *parser) calloninput21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput21(stack["cond"])
}

func (c *current) oninput36() (any, error) {

	return string(c.text), nil
}

func (p *parser) calloninput36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput36()
}

func (c *current) oninput32(name any) (any, error) {
	return name, nil
}

func (p *parser) calloninput32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput32(stack["name"])
}

func (c *current) oninput51() (any, error) {
	return nil, nil
}

func (p *parser) calloninput51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput51()
}

func (c *current) oninput66() (any, error) {

	return string(c.text), nil
}

func (p *parser) calloninput66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput66()
}

func (c *current) oninput73() (any, error) {
	return []string{}, nil
}

func (p *parser) calloninput73() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput73()
}

func (c *current) oninput87() (any, error) {

	return string(c.text), nil
}

func (p *parser) calloninput87() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput87()
}

func (c *current) oninput92() (any, error) {

	return strconv.Atoi(string(c.text))
}

func (p *parser) calloninput92() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput92()
}

func (c *current) oninput104() (any, error) {
	return string(c.text), nil
}

func (p *parser) calloninput104() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput104()
}

func (c *current) oninput85() (any, error) {
	return string(c.text), nil
}

func (p *parser) calloninput85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput85()
}

func (c *current) oninput161() (any, error) {

	return string(c.text), nil
}

func (p *parser) calloninput161() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput161()
}

func (c *current) oninput166() (any, error) {

	return strconv.Atoi(string(c.text))
}

func (p *parser) calloninput166() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput166()
}

func (c *current) oninput178() (any, error) {
	return string(c.text), nil
}

func (p *parser) calloninput178() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput178()
}

func (c *current) oninput159() (any, error) {
	return string(c.text), nil
}

func (p *parser) calloninput159() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput159()
}

func (c *current) oninput151(e any) (any, error) {
	return e, nil
}

func (p *parser) calloninput151() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput151(stack["e"])
}

func (c *current) oninput79(first, rest any) (any, error) {
	return gatherParams(first, rest), nil
}

func (p *parser) calloninput79() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput79(stack["first"], stack["rest"])
}

func (c *current) oninput62(name, params any) (any, error) {

	nameStr, _ := name.(string)

	return &StoryNodeLine{
		Pos:    []int{c.pos.line, c.pos.col, c.pos.offset},
		Name:   nameStr,
		Params: params.([]string),
	}, nil
}

func (p *parser) calloninput62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput62(stack["name"], stack["params"])
}

func (c *current) oninput230() (any, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) calloninput230() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput230()
}

func (c *current) oninput226(code any) (any, error) {

	return &StoryNodeLine{
		Type: "code",
		Pos:  []int{c.pos.line, c.pos.col, c.pos.offset},
		Code: code.(string),
	}, nil
}

func (p *parser) calloninput226() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput226(stack["code"])
}

func (c *current) oninput241() (any, error) {
	return string(c.text), nil
}

func (p *parser) calloninput241() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput241()
}

func (c *current) oninput239(text any) (any, error) {

	if strings.TrimSpace(text.(string)) == "" {
		return nil, nil
	}
	return &StoryNodeLine{
		Pos:    []int{c.pos.line, c.pos.col, c.pos.offset},
		Name:   "sayRaw",
		Params: []string{text.(string)},
	}, nil
}

func (p *parser) calloninput239() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput239(stack["text"])
}

func (c *current) oninput46(lines any) (any, error) {
	return lines, nil
}

func (p *parser) calloninput46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput46(stack["lines"])
}

func (c *current) oninput10(name, cond, next, lines any) (any, error) {

	nameStr, _ := name.(string)
	condStr, _ := cond.(string)
	nextStr, _ := next.(string)

	var items []*StoryNodeLine
	if x, ok := lines.([]any); ok {
		for _, i := range x {
			if i != nil {
				items = append(items, i.(*StoryNodeLine))
			}
		}
	}

	return &StoryNode{
		Pos:       []int{c.pos.line, c.pos.col, c.pos.offset},
		Name:      nameStr,
		Lines:     items,
		Condition: condStr,
		Next:      nextStr,
	}, nil
}

func (p *parser) calloninput10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput10(stack["name"], stack["cond"], stack["next"], stack["lines"])
}

func (c *current) oninput256() (any, error) {

	return string(c.text), nil
}

func (p *parser) calloninput256() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput256()
}

func (c *current) oninput270() (any, error) {
	return nil, nil
}

func (p *parser) calloninput270() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput270()
}

func (c *current) oninput285() (any, error) {

	return string(c.text), nil
}

func (p *parser) calloninput285() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput285()
}

func (c *current) oninput292() (any, error) {
	return []string{}, nil
}

func (p *parser) calloninput292() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput292()
}

func (c *current) oninput306() (any, error) {

	return string(c.text), nil
}

func (p *parser) calloninput306() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput306()
}

func (c *current) oninput311() (any, error) {

	return strconv.Atoi(string(c.text))
}

func (p *parser) calloninput311() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput311()
}

func (c *current) oninput323() (any, error) {
	return string(c.text), nil
}

func (p *parser) calloninput323() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput323()
}

func (c *current) oninput304() (any, error) {
	return string(c.text), nil
}

func (p *parser) calloninput304() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput304()
}

func (c *current) oninput380() (any, error) {

	return string(c.text), nil
}

func (p *parser) calloninput380() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput380()
}

func (c *current) oninput385() (any, error) {

	return strconv.Atoi(string(c.text))
}

func (p *parser) calloninput385() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput385()
}

func (c *current) oninput397() (any, error) {
	return string(c.text), nil
}

func (p *parser) calloninput397() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput397()
}

func (c *current) oninput378() (any, error) {
	return string(c.text), nil
}

func (p *parser) calloninput378() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput378()
}

func (c *current) oninput370(e any) (any, error) {
	return e, nil
}

func (p *parser) calloninput370() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput370(stack["e"])
}

func (c *current) oninput298(first, rest any) (any, error) {
	return gatherParams(first, rest), nil
}

func (p *parser) calloninput298() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput298(stack["first"], stack["rest"])
}

func (c *current) oninput281(name, params any) (any, error) {

	nameStr, _ := name.(string)

	return &StoryNodeLine{
		Pos:    []int{c.pos.line, c.pos.col, c.pos.offset},
		Name:   nameStr,
		Params: params.([]string),
	}, nil
}

func (p *parser) calloninput281() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput281(stack["name"], stack["params"])
}

func (c *current) oninput449() (any, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) calloninput449() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput449()
}

func (c *current) oninput445(code any) (any, error) {

	return &StoryNodeLine{
		Type: "code",
		Pos:  []int{c.pos.line, c.pos.col, c.pos.offset},
		Code: code.(string),
	}, nil
}

func (p *parser) calloninput445() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput445(stack["code"])
}

func (c *current) oninput460() (any, error) {
	return string(c.text), nil
}

func (p *parser) calloninput460() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput460()
}

func (c *current) oninput458(text any) (any, error) {

	if strings.TrimSpace(text.(string)) == "" {
		return nil, nil
	}
	return &StoryNodeLine{
		Pos:    []int{c.pos.line, c.pos.col, c.pos.offset},
		Name:   "sayRaw",
		Params: []string{text.(string)},
	}, nil
}

func (p *parser) calloninput458() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput458(stack["text"])
}

func (c *current) oninput265(lines any) (any, error) {
	return lines, nil
}

func (p *parser) calloninput265() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput265(stack["lines"])
}

func (c *current) oninput251(name, lines any) (any, error) {

	nameStr, _ := name.(string)

	var items []*StoryNodeLine
	if x, ok := lines.([]any); ok {
		for _, i := range x {
			if i != nil {
				items = append(items, i.(*StoryNodeLine))
			}
		}
	}

	return &StoryNode{
		Pos:   []int{c.pos.line, c.pos.col, c.pos.offset},
		Name:  nameStr,
		Lines: items,
	}, nil
}

func (p *parser) calloninput251() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput251(stack["name"], stack["lines"])
}

func (c *current) oninput6(nodes any) (any, error) {

	var items []*StoryNode
	if x, ok := nodes.([]any); ok {
		for _, i := range x {
			items = append(items, i.(*StoryNode))
		}
	}
	return &Story{Items: items}, nil
}

func (p *parser) calloninput6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput6(stack["nodes"])
}

func (c *current) oninput1(x any) (any, error) {

	return x, nil
}

func (p *parser) calloninput1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput1(stack["x"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) { // nolint: deadcode
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) { // nolint: deadcode
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

// nolint: structcheck
type grammar struct {
	pos   position
	rules []*rule
}

// nolint: structcheck
type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

// nolint: structcheck
type choiceExpr struct {
	pos          position
	alternatives []any
}

// nolint: structcheck
type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

// nolint: structcheck
type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

// nolint: structcheck
type seqExpr struct {
	pos   position
	exprs []any
}

// nolint: structcheck
type throwExpr struct {
	pos   position
	label string
}

// nolint: structcheck
type labeledExpr struct {
	pos   position
	label string
	expr  any
}

// nolint: structcheck
type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr // nolint: structcheck
	notExpr        expr // nolint: structcheck
	zeroOrOneExpr  expr // nolint: structcheck
	zeroOrMoreExpr expr // nolint: structcheck
	oneOrMoreExpr  expr // nolint: structcheck
)

// nolint: structcheck
type ruleRefExpr struct {
	pos  position
	name string
}

// nolint: structcheck
type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

// nolint: structcheck
type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

// nolint: structcheck
type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

// nolint: structcheck
type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position // nolint: structcheck

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

// nolint: structcheck,deadcode
type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

// nolint: varcheck
const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

// nolint: structcheck,maligned
type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

// nolint: gocyclo
func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

// nolint: gocyclo
func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

// nolint: gocyclo
func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
