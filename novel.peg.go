// Code generated by pigeon; DO NOT EDIT.

package novelscript

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

type ParserCustomData struct {
	CurIndex   int
	Name2Index map[string]int
}

func (d *ParserCustomData) getNextIndex() int {
	// 如果我是第0段，那next是1
	d.CurIndex += 1
	return d.CurIndex
}

func (d *ParserCustomData) setSectionIndex(name string) error {
	if name == "" {
		return nil
	}
	if d.Name2Index == nil {
		d.Name2Index = map[string]int{}
	}

	if _, exists := d.Name2Index[name]; exists {
		return errors.New("section name must be unique")
	}

	d.Name2Index[name] = d.CurIndex
	return nil
}

func parseFilterNil[T any](lines any, t T) []*T {
	var items []*T
	if x, ok := lines.([]any); ok {
		for _, i := range x {
			if i != nil {
				if _, ok2 := i.([]any); ok2 {
					items = append(items, parseFilterNil(i, t)...)
				} else {
					items = append(items, i.(*T))
				}
			}
		}
	}
	return items
}

func parseReturnTextSectionLine(c *current, text string) (any, error) {
	return retWrap(&StorySectionLine{
		Type: "", // 作为最常见种类，故意置空，节省空间
		Pos:  []int{c.pos.line, c.pos.col, c.pos.offset},
		Text: text,
	}, nil)
}

func parseReturnInvokeSectionLine(c *current, name string, params []string) (any, error) {
	return retWrap(&StorySectionLine{
		Type:   "invoke",
		Pos:    []int{c.pos.line, c.pos.col, c.pos.offset},
		Name:   name,
		Params: params,
	}, nil)
}

func parseReturnCodeSectionLine(c *current, typeName string, code string) (any, error) {
	return retWrap(&StorySectionLine{
		Type: typeName,
		Pos:  []int{c.pos.line, c.pos.col, c.pos.offset},
		Code: code,
	}, nil)
}

func gatherParams(first any, v any) []string {
	if v == nil {
		return nil
	}

	items := []string{first.(string)}
	if x, ok := v.([]any); ok {
		for _, i := range x {
			items = append(items, i.(string))
		}
	}
	return items
}

func retWrap(a any, err error) (any, error) {
	return a, err
}

func toStr(x []byte) string {
	return string(x)
}

func toStrWithTrim(x []byte) string {
	return strings.TrimSpace(string(x))
}

var g = &grammar{
	rules: []*rule{
		{
			name: "input",
			pos:  position{line: 188, col: 1, offset: 4188},
			expr: &actionExpr{
				pos: position{line: 188, col: 10, offset: 4197},
				run: (*parser).calloninput1,
				expr: &seqExpr{
					pos: position{line: 188, col: 10, offset: 4197},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 406, col: 20, offset: 10846},
							expr: &charClassMatcher{
								pos:        position{line: 406, col: 20, offset: 10846},
								val:        "[ \\n\\t\\r]",
								chars:      []rune{' ', '\n', '\t', '\r'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 188, col: 13, offset: 4200},
							label: "x",
							expr: &ruleRefExpr{
								pos:  position{line: 188, col: 15, offset: 4202},
								name: "nodes",
							},
						},
						&notExpr{
							pos: position{line: 188, col: 21, offset: 4208},
							expr: &anyMatcher{
								line: 188, col: 22, offset: 4209,
							},
						},
					},
				},
			},
		},
		{
			name: "nodes",
			pos:  position{line: 192, col: 1, offset: 4248},
			expr: &actionExpr{
				pos: position{line: 192, col: 10, offset: 4257},
				run: (*parser).callonnodes1,
				expr: &labeledExpr{
					pos:   position{line: 192, col: 10, offset: 4257},
					label: "nodes",
					expr: &zeroOrMoreExpr{
						pos: position{line: 192, col: 17, offset: 4264},
						expr: &ruleRefExpr{
							pos:  position{line: 192, col: 17, offset: 4264},
							name: "node",
						},
					},
				},
			},
		},
		{
			name: "_nodeCond",
			pos:  position{line: 206, col: 1, offset: 4573},
			expr: &actionExpr{
				pos: position{line: 206, col: 14, offset: 4586},
				run: (*parser).callon_nodeCond1,
				expr: &seqExpr{
					pos: position{line: 206, col: 14, offset: 4586},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 206, col: 14, offset: 4586},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 206, col: 18, offset: 4590},
							label: "cond",
							expr: &zeroOrOneExpr{
								pos: position{line: 206, col: 23, offset: 4595},
								expr: &ruleRefExpr{
									pos:  position{line: 206, col: 23, offset: 4595},
									name: "CodeExpr2",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 206, col: 34, offset: 4606},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "node",
			pos:  position{line: 209, col: 1, offset: 4713},
			expr: &choiceExpr{
				pos: position{line: 209, col: 9, offset: 4721},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 209, col: 9, offset: 4721},
						name: "nodeType1",
					},
					&ruleRefExpr{
						pos:  position{line: 209, col: 21, offset: 4733},
						name: "nodeType2",
					},
				},
			},
		},
		{
			name: "nodeType1",
			pos:  position{line: 211, col: 1, offset: 4746},
			expr: &actionExpr{
				pos: position{line: 211, col: 14, offset: 4759},
				run: (*parser).callonnodeType11,
				expr: &seqExpr{
					pos: position{line: 211, col: 14, offset: 4759},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 211, col: 14, offset: 4759},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 408, col: 11, offset: 10870},
							expr: &charClassMatcher{
								pos:        position{line: 408, col: 11, offset: 10870},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 211, col: 25, offset: 4770},
							label: "name",
							expr: &zeroOrOneExpr{
								pos: position{line: 211, col: 30, offset: 4775},
								expr: &actionExpr{
									pos: position{line: 396, col: 15, offset: 10524},
									run: (*parser).callonnodeType18,
									expr: &seqExpr{
										pos: position{line: 396, col: 15, offset: 10524},
										exprs: []any{
											&charClassMatcher{
												pos:        position{line: 401, col: 13, offset: 10630},
												val:        "[_\\pL\\pOther_ID_Start]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 396, col: 24, offset: 10533},
												expr: &charClassMatcher{
													pos:        position{line: 404, col: 16, offset: 10747},
													val:        "[\\pL\\pOther_ID_Start\\pNl\\pMn\\pMc\\pNd\\pPc\\pOther_ID_Continue]",
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start"), rangeTable("Nl"), rangeTable("Mn"), rangeTable("Mc"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Other_ID_Continue")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 408, col: 11, offset: 10870},
							expr: &charClassMatcher{
								pos:        position{line: 408, col: 11, offset: 10870},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 211, col: 50, offset: 4795},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 211, col: 55, offset: 4800},
								name: "_nodeCond",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 408, col: 11, offset: 10870},
							expr: &charClassMatcher{
								pos:        position{line: 408, col: 11, offset: 10870},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 211, col: 72, offset: 4817},
							label: "next",
							expr: &zeroOrOneExpr{
								pos: position{line: 211, col: 77, offset: 4822},
								expr: &actionExpr{
									pos: position{line: 207, col: 14, offset: 4655},
									run: (*parser).callonnodeType121,
									expr: &seqExpr{
										pos: position{line: 207, col: 14, offset: 4655},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 207, col: 14, offset: 4655},
												val:        "[",
												ignoreCase: false,
												want:       "\"[\"",
											},
											&labeledExpr{
												pos:   position{line: 207, col: 18, offset: 4659},
												label: "name",
												expr: &actionExpr{
													pos: position{line: 396, col: 15, offset: 10524},
													run: (*parser).callonnodeType125,
													expr: &seqExpr{
														pos: position{line: 396, col: 15, offset: 10524},
														exprs: []any{
															&charClassMatcher{
																pos:        position{line: 401, col: 13, offset: 10630},
																val:        "[_\\pL\\pOther_ID_Start]",
																chars:      []rune{'_'},
																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start")},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 396, col: 24, offset: 10533},
																expr: &charClassMatcher{
																	pos:        position{line: 404, col: 16, offset: 10747},
																	val:        "[\\pL\\pOther_ID_Start\\pNl\\pMn\\pMc\\pNd\\pPc\\pOther_ID_Continue]",
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start"), rangeTable("Nl"), rangeTable("Mn"), rangeTable("Mc"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Other_ID_Continue")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 207, col: 34, offset: 4675},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 408, col: 11, offset: 10870},
							expr: &charClassMatcher{
								pos:        position{line: 408, col: 11, offset: 10870},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 411, col: 8, offset: 10901},
							expr: &litMatcher{
								pos:        position{line: 411, col: 8, offset: 10901},
								val:        "\r",
								ignoreCase: false,
								want:       "\"\\r\"",
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 14, offset: 10907},
							val:        "\n",
							ignoreCase: false,
							want:       "\"\\n\"",
						},
						&labeledExpr{
							pos:   position{line: 211, col: 100, offset: 4845},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 211, col: 106, offset: 4851},
								name: "nodeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "nodeType2",
			pos:  position{line: 246, col: 1, offset: 5760},
			expr: &actionExpr{
				pos: position{line: 246, col: 14, offset: 5773},
				run: (*parser).callonnodeType21,
				expr: &seqExpr{
					pos: position{line: 246, col: 14, offset: 5773},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 246, col: 14, offset: 5773},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 408, col: 11, offset: 10870},
							expr: &charClassMatcher{
								pos:        position{line: 408, col: 11, offset: 10870},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 246, col: 25, offset: 5784},
							label: "name",
							expr: &zeroOrOneExpr{
								pos: position{line: 246, col: 30, offset: 5789},
								expr: &actionExpr{
									pos: position{line: 396, col: 15, offset: 10524},
									run: (*parser).callonnodeType28,
									expr: &seqExpr{
										pos: position{line: 396, col: 15, offset: 10524},
										exprs: []any{
											&charClassMatcher{
												pos:        position{line: 401, col: 13, offset: 10630},
												val:        "[_\\pL\\pOther_ID_Start]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 396, col: 24, offset: 10533},
												expr: &charClassMatcher{
													pos:        position{line: 404, col: 16, offset: 10747},
													val:        "[\\pL\\pOther_ID_Start\\pNl\\pMn\\pMc\\pNd\\pPc\\pOther_ID_Continue]",
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Other_ID_Start"), rangeTable("Nl"), rangeTable("Mn"), rangeTable("Mc"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Other_ID_Continue")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 408, col: 11, offset: 10870},
							expr: &charClassMatcher{
								pos:        position{line: 408, col: 11, offset: 10870},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 411, col: 8, offset: 10901},
							expr: &litMatcher{
								pos:        position{line: 411, col: 8, offset: 10901},
								val:        "\r",
								ignoreCase: false,
								want:       "\"\\r\"",
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 14, offset: 10907},
							val:        "\n",
							ignoreCase: false,
							want:       "\"\\n\"",
						},
						&labeledExpr{
							pos:   position{line: 246, col: 53, offset: 5812},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 59, offset: 5818},
								name: "nodeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "nodeLines",
			pos:  position{line: 275, col: 1, offset: 6563},
			expr: &actionExpr{
				pos: position{line: 275, col: 14, offset: 6576},
				run: (*parser).callonnodeLines1,
				expr: &seqExpr{
					pos: position{line: 275, col: 14, offset: 6576},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 275, col: 14, offset: 6576},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 275, col: 20, offset: 6582},
								expr: &ruleRefExpr{
									pos:  position{line: 275, col: 20, offset: 6582},
									name: "nodeLine",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 406, col: 20, offset: 10846},
							expr: &charClassMatcher{
								pos:        position{line: 406, col: 20, offset: 10846},
								val:        "[ \\n\\t\\r]",
								chars:      []rune{' ', '\n', '\t', '\r'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "nodeLine",
			pos:  position{line: 277, col: 1, offset: 6630},
			expr: &choiceExpr{
				pos: position{line: 277, col: 13, offset: 6642},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 279, col: 24, offset: 6725},
						run: (*parser).callonnodeLine2,
						expr: &seqExpr{
							pos: position{line: 279, col: 24, offset: 6725},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 279, col: 24, offset: 6725},
									val:        "@#",
									ignoreCase: false,
									want:       "\"@#\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 279, col: 32, offset: 6733},
									expr: &seqExpr{
										pos: position{line: 279, col: 33, offset: 6734},
										exprs: []any{
											&notExpr{
												pos: position{line: 279, col: 33, offset: 6734},
												expr: &charClassMatcher{
													pos:        position{line: 410, col: 7, offset: 10886},
													val:        "[\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&anyMatcher{
												line: 279, col: 37, offset: 6738,
											},
										},
									},
								},
								&charClassMatcher{
									pos:        position{line: 410, col: 7, offset: 10886},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 406, col: 20, offset: 10846},
									expr: &charClassMatcher{
										pos:        position{line: 406, col: 20, offset: 10846},
										val:        "[ \\n\\t\\r]",
										chars:      []rune{' ', '\n', '\t', '\r'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 35, offset: 6664},
						name: "nodeLineType2",
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 51, offset: 6680},
						name: "nodeLineCommonText",
					},
				},
			},
		},
		{
			name: "nodeLineType2",
			pos:  position{line: 297, col: 1, offset: 7307},
			expr: &actionExpr{
				pos: position{line: 297, col: 18, offset: 7324},
				run: (*parser).callonnodeLineType21,
				expr: &seqExpr{
					pos: position{line: 297, col: 18, offset: 7324},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 297, col: 18, offset: 7324},
							val:        "@{",
							ignoreCase: false,
							want:       "\"@{\"",
						},
						&labeledExpr{
							pos:   position{line: 297, col: 23, offset: 7329},
							label: "code",
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 28, offset: 7334},
								name: "Code",
							},
						},
						&choiceExpr{
							pos: position{line: 297, col: 34, offset: 7340},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 297, col: 34, offset: 7340},
									val:        "}!",
									ignoreCase: false,
									want:       "\"}!\"",
								},
								&litMatcher{
									pos:        position{line: 297, col: 41, offset: 7347},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 408, col: 11, offset: 10870},
							expr: &charClassMatcher{
								pos:        position{line: 408, col: 11, offset: 10870},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 411, col: 8, offset: 10901},
							expr: &litMatcher{
								pos:        position{line: 411, col: 8, offset: 10901},
								val:        "\r",
								ignoreCase: false,
								want:       "\"\\r\"",
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 14, offset: 10907},
							val:        "\n",
							ignoreCase: false,
							want:       "\"\\n\"",
						},
					},
				},
			},
		},
		{
			name: "nodeLineExprBlock",
			pos:  position{line: 328, col: 1, offset: 8198},
			expr: &actionExpr{
				pos: position{line: 328, col: 22, offset: 8219},
				run: (*parser).callonnodeLineExprBlock1,
				expr: &seqExpr{
					pos: position{line: 328, col: 22, offset: 8219},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 328, col: 22, offset: 8219},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 328, col: 26, offset: 8223},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 31, offset: 8228},
								name: "CodeExpr",
							},
						},
						&litMatcher{
							pos:        position{line: 328, col: 40, offset: 8237},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "nodeLineCommonText",
			pos:  position{line: 337, col: 1, offset: 8502},
			expr: &actionExpr{
				pos: position{line: 337, col: 23, offset: 8524},
				run: (*parser).callonnodeLineCommonText1,
				expr: &seqExpr{
					pos: position{line: 337, col: 23, offset: 8524},
					exprs: []any{
						&notExpr{
							pos: position{line: 337, col: 23, offset: 8524},
							expr: &charClassMatcher{
								pos:        position{line: 337, col: 24, offset: 8525},
								val:        "[:@]",
								chars:      []rune{':', '@'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 337, col: 29, offset: 8530},
							label: "items",
							expr: &zeroOrMoreExpr{
								pos: position{line: 337, col: 36, offset: 8537},
								expr: &choiceExpr{
									pos: position{line: 337, col: 38, offset: 8539},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 307, col: 17, offset: 7682},
											run: (*parser).callonnodeLineCommonText8,
											expr: &labeledExpr{
												pos:   position{line: 307, col: 17, offset: 7682},
												label: "items",
												expr: &oneOrMoreExpr{
													pos: position{line: 307, col: 24, offset: 7689},
													expr: &choiceExpr{
														pos: position{line: 307, col: 25, offset: 7690},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 305, col: 15, offset: 7567},
																run: (*parser).callonnodeLineCommonText12,
																expr: &litMatcher{
																	pos:        position{line: 305, col: 15, offset: 7567},
																	val:        "\\{",
																	ignoreCase: false,
																	want:       "\"\\\\{\"",
																},
															},
															&actionExpr{
																pos: position{line: 306, col: 13, offset: 7616},
																run: (*parser).callonnodeLineCommonText14,
																expr: &charClassMatcher{
																	pos:        position{line: 306, col: 13, offset: 7616},
																	val:        "[^\\r\\n{]",
																	chars:      []rune{'\r', '\n', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 337, col: 53, offset: 8554},
											name: "nodeLineExprBlock",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 411, col: 8, offset: 10901},
							expr: &litMatcher{
								pos:        position{line: 411, col: 8, offset: 10901},
								val:        "\r",
								ignoreCase: false,
								want:       "\"\\r\"",
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 14, offset: 10907},
							val:        "\n",
							ignoreCase: false,
							want:       "\"\\n\"",
						},
					},
				},
			},
		},
		{
			name: "Code",
			pos:  position{line: 425, col: 1, offset: 11395},
			expr: &actionExpr{
				pos: position{line: 425, col: 9, offset: 11403},
				run: (*parser).callonCode1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 425, col: 9, offset: 11403},
					expr: &choiceExpr{
						pos: position{line: 425, col: 11, offset: 11405},
						alternatives: []any{
							&oneOrMoreExpr{
								pos: position{line: 425, col: 11, offset: 11405},
								expr: &choiceExpr{
									pos: position{line: 425, col: 13, offset: 11407},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 416, col: 21, offset: 11073},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 416, col: 21, offset: 11073},
													val:        "/*",
													ignoreCase: false,
													want:       "\"/*\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 416, col: 26, offset: 11078},
													expr: &seqExpr{
														pos: position{line: 416, col: 28, offset: 11080},
														exprs: []any{
															&notExpr{
																pos: position{line: 416, col: 28, offset: 11080},
																expr: &litMatcher{
																	pos:        position{line: 416, col: 29, offset: 11081},
																	val:        "*/",
																	ignoreCase: false,
																	want:       "\"*/\"",
																},
															},
															&anyMatcher{
																line: 414, col: 15, offset: 11001,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 416, col: 48, offset: 11100},
													val:        "*/",
													ignoreCase: false,
													want:       "\"*/\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 418, col: 22, offset: 11205},
											exprs: []any{
												&notExpr{
													pos: position{line: 418, col: 22, offset: 11205},
													expr: &litMatcher{
														pos:        position{line: 418, col: 24, offset: 11207},
														val:        "//{",
														ignoreCase: false,
														want:       "\"//{\"",
													},
												},
												&litMatcher{
													pos:        position{line: 418, col: 31, offset: 11214},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 418, col: 36, offset: 11219},
													expr: &seqExpr{
														pos: position{line: 418, col: 38, offset: 11221},
														exprs: []any{
															&notExpr{
																pos: position{line: 418, col: 38, offset: 11221},
																expr: &charClassMatcher{
																	pos:        position{line: 410, col: 7, offset: 10886},
																	val:        "[\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&anyMatcher{
																line: 414, col: 15, offset: 11001,
															},
														},
													},
												},
											},
										},
										&seqExpr{
											pos: position{line: 420, col: 22, offset: 11263},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 420, col: 22, offset: 11263},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 420, col: 26, offset: 11267},
													expr: &choiceExpr{
														pos: position{line: 420, col: 27, offset: 11268},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 420, col: 27, offset: 11268},
																val:        "\\\"",
																ignoreCase: false,
																want:       "\"\\\\\\\"\"",
															},
															&litMatcher{
																pos:        position{line: 420, col: 34, offset: 11275},
																val:        "\\\\",
																ignoreCase: false,
																want:       "\"\\\\\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 420, col: 41, offset: 11282},
																val:        "[^\"\\r\\n]",
																chars:      []rune{'"', '\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 420, col: 52, offset: 11293},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 421, col: 21, offset: 11320},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 421, col: 21, offset: 11320},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 421, col: 25, offset: 11324},
													expr: &charClassMatcher{
														pos:        position{line: 421, col: 25, offset: 11324},
														val:        "[^`]",
														chars:      []rune{'`'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&litMatcher{
													pos:        position{line: 421, col: 31, offset: 11330},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 422, col: 21, offset: 11357},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 422, col: 21, offset: 11357},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 422, col: 26, offset: 11362},
													expr: &choiceExpr{
														pos: position{line: 422, col: 27, offset: 11363},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 422, col: 27, offset: 11363},
																val:        "\\'",
																ignoreCase: false,
																want:       "\"\\\\'\"",
															},
															&litMatcher{
																pos:        position{line: 422, col: 34, offset: 11370},
																val:        "\\\\",
																ignoreCase: false,
																want:       "\"\\\\\\\\\"",
															},
															&oneOrMoreExpr{
																pos: position{line: 422, col: 41, offset: 11377},
																expr: &charClassMatcher{
																	pos:        position{line: 422, col: 41, offset: 11377},
																	val:        "[^\\]",
																	chars:      []rune{'\''},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 422, col: 49, offset: 11385},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 425, col: 43, offset: 11437},
											exprs: []any{
												&notExpr{
													pos: position{line: 425, col: 43, offset: 11437},
													expr: &charClassMatcher{
														pos:        position{line: 425, col: 44, offset: 11438},
														val:        "[{}]",
														chars:      []rune{'{', '}'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 414, col: 15, offset: 11001,
												},
											},
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 425, col: 65, offset: 11459},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 425, col: 65, offset: 11459},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
									&ruleRefExpr{
										pos:  position{line: 425, col: 69, offset: 11463},
										name: "Code",
									},
									&litMatcher{
										pos:        position{line: 425, col: 74, offset: 11468},
										val:        "}",
										ignoreCase: false,
										want:       "\"}\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CodeExpr",
			pos:  position{line: 426, col: 1, offset: 11516},
			expr: &actionExpr{
				pos: position{line: 426, col: 13, offset: 11528},
				run: (*parser).callonCodeExpr1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 426, col: 13, offset: 11528},
					expr: &choiceExpr{
						pos: position{line: 426, col: 15, offset: 11530},
						alternatives: []any{
							&oneOrMoreExpr{
								pos: position{line: 426, col: 15, offset: 11530},
								expr: &choiceExpr{
									pos: position{line: 426, col: 16, offset: 11531},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 420, col: 22, offset: 11263},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 420, col: 22, offset: 11263},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 420, col: 26, offset: 11267},
													expr: &choiceExpr{
														pos: position{line: 420, col: 27, offset: 11268},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 420, col: 27, offset: 11268},
																val:        "\\\"",
																ignoreCase: false,
																want:       "\"\\\\\\\"\"",
															},
															&litMatcher{
																pos:        position{line: 420, col: 34, offset: 11275},
																val:        "\\\\",
																ignoreCase: false,
																want:       "\"\\\\\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 420, col: 41, offset: 11282},
																val:        "[^\"\\r\\n]",
																chars:      []rune{'"', '\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 420, col: 52, offset: 11293},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 421, col: 21, offset: 11320},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 421, col: 21, offset: 11320},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 421, col: 25, offset: 11324},
													expr: &charClassMatcher{
														pos:        position{line: 421, col: 25, offset: 11324},
														val:        "[^`]",
														chars:      []rune{'`'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&litMatcher{
													pos:        position{line: 421, col: 31, offset: 11330},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 422, col: 21, offset: 11357},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 422, col: 21, offset: 11357},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 422, col: 26, offset: 11362},
													expr: &choiceExpr{
														pos: position{line: 422, col: 27, offset: 11363},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 422, col: 27, offset: 11363},
																val:        "\\'",
																ignoreCase: false,
																want:       "\"\\\\'\"",
															},
															&litMatcher{
																pos:        position{line: 422, col: 34, offset: 11370},
																val:        "\\\\",
																ignoreCase: false,
																want:       "\"\\\\\\\\\"",
															},
															&oneOrMoreExpr{
																pos: position{line: 422, col: 41, offset: 11377},
																expr: &charClassMatcher{
																	pos:        position{line: 422, col: 41, offset: 11377},
																	val:        "[^\\]",
																	chars:      []rune{'\''},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 422, col: 49, offset: 11385},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 426, col: 36, offset: 11551},
											exprs: []any{
												&notExpr{
													pos: position{line: 426, col: 36, offset: 11551},
													expr: &charClassMatcher{
														pos:        position{line: 426, col: 37, offset: 11552},
														val:        "[{}]",
														chars:      []rune{'{', '}'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 414, col: 15, offset: 11001,
												},
											},
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 426, col: 57, offset: 11572},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 426, col: 57, offset: 11572},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
									&ruleRefExpr{
										pos:  position{line: 426, col: 61, offset: 11576},
										name: "CodeExpr",
									},
									&litMatcher{
										pos:        position{line: 426, col: 70, offset: 11585},
										val:        "}",
										ignoreCase: false,
										want:       "\"}\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CodeExpr2",
			pos:  position{line: 427, col: 1, offset: 11633},
			expr: &actionExpr{
				pos: position{line: 427, col: 14, offset: 11646},
				run: (*parser).callonCodeExpr21,
				expr: &zeroOrMoreExpr{
					pos: position{line: 427, col: 14, offset: 11646},
					expr: &choiceExpr{
						pos: position{line: 427, col: 16, offset: 11648},
						alternatives: []any{
							&oneOrMoreExpr{
								pos: position{line: 427, col: 16, offset: 11648},
								expr: &choiceExpr{
									pos: position{line: 427, col: 17, offset: 11649},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 420, col: 22, offset: 11263},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 420, col: 22, offset: 11263},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 420, col: 26, offset: 11267},
													expr: &choiceExpr{
														pos: position{line: 420, col: 27, offset: 11268},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 420, col: 27, offset: 11268},
																val:        "\\\"",
																ignoreCase: false,
																want:       "\"\\\\\\\"\"",
															},
															&litMatcher{
																pos:        position{line: 420, col: 34, offset: 11275},
																val:        "\\\\",
																ignoreCase: false,
																want:       "\"\\\\\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 420, col: 41, offset: 11282},
																val:        "[^\"\\r\\n]",
																chars:      []rune{'"', '\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 420, col: 52, offset: 11293},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 421, col: 21, offset: 11320},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 421, col: 21, offset: 11320},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 421, col: 25, offset: 11324},
													expr: &charClassMatcher{
														pos:        position{line: 421, col: 25, offset: 11324},
														val:        "[^`]",
														chars:      []rune{'`'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&litMatcher{
													pos:        position{line: 421, col: 31, offset: 11330},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 422, col: 21, offset: 11357},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 422, col: 21, offset: 11357},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 422, col: 26, offset: 11362},
													expr: &choiceExpr{
														pos: position{line: 422, col: 27, offset: 11363},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 422, col: 27, offset: 11363},
																val:        "\\'",
																ignoreCase: false,
																want:       "\"\\\\'\"",
															},
															&litMatcher{
																pos:        position{line: 422, col: 34, offset: 11370},
																val:        "\\\\",
																ignoreCase: false,
																want:       "\"\\\\\\\\\"",
															},
															&oneOrMoreExpr{
																pos: position{line: 422, col: 41, offset: 11377},
																expr: &charClassMatcher{
																	pos:        position{line: 422, col: 41, offset: 11377},
																	val:        "[^\\]",
																	chars:      []rune{'\''},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 422, col: 49, offset: 11385},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 427, col: 37, offset: 11669},
											exprs: []any{
												&notExpr{
													pos: position{line: 427, col: 37, offset: 11669},
													expr: &charClassMatcher{
														pos:        position{line: 427, col: 38, offset: 11670},
														val:        "[[]]",
														chars:      []rune{'[', ']'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 414, col: 15, offset: 11001,
												},
											},
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 427, col: 59, offset: 11691},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 427, col: 59, offset: 11691},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&ruleRefExpr{
										pos:  position{line: 427, col: 63, offset: 11695},
										name: "CodeExpr2",
									},
									&litMatcher{
										pos:        position{line: 427, col: 73, offset: 11705},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) oninput1(x any) (any, error) {
	return retWrap(x, nil)
}

func (p *parser) calloninput1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninput1(stack["x"])
}

func (c *current) onnodes1(nodes any) (any, error) {
	var items []*StorySection
	if x, ok := nodes.([]any); ok {
		for _, i := range x {
			items = append(items, i.(*StorySection))
		}
	}
	return retWrap(&Story{Items: items}, nil)
}

func (p *parser) callonnodes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnodes1(stack["nodes"])
}

func (c *current) on_nodeCond1(cond any) (any, error) {
	return retWrap(cond, nil)
}

func (p *parser) callon_nodeCond1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_nodeCond1(stack["cond"])
}

func (c *current) onnodeType18() (any, error) {
	return retWrap(toStr(c.text), nil)
}

func (p *parser) callonnodeType18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnodeType18()
}

func (c *current) onnodeType125() (any, error) {
	return retWrap(toStr(c.text), nil)
}

func (p *parser) callonnodeType125() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnodeType125()
}

func (c *current) onnodeType121(name any) (any, error) {
	return retWrap(name, nil)
}

func (p *parser) callonnodeType121() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnodeType121(stack["name"])
}

func (c *current) onnodeType11(name, cond, next, lines any) (any, error) {
	nameStr, _ := name.(string)
	condStr, _ := cond.(string)
	nextStr, _ := next.(string)
	items := parseFilterNil(lines, StorySectionLine{})

	if err := c.data.setSectionIndex(nameStr); err != nil {
		return nil, err
	}
	return retWrap(&StorySection{
		Pos:       []int{c.pos.line, c.pos.col, c.pos.offset},
		Name:      nameStr,
		Lines:     items,
		Condition: condStr,
		Next:      nextStr,
		NextIndex: c.data.getNextIndex(),
	}, nil)
}

func (p *parser) callonnodeType11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnodeType11(stack["name"], stack["cond"], stack["next"], stack["lines"])
}

func (c *current) onnodeType28() (any, error) {
	return retWrap(toStr(c.text), nil)
}

func (p *parser) callonnodeType28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnodeType28()
}

func (c *current) onnodeType21(name, lines any) (any, error) {
	nameStr, _ := name.(string)
	items := parseFilterNil(lines, StorySectionLine{})

	if err := c.data.setSectionIndex(nameStr); err != nil {
		return nil, err
	}
	return retWrap(&StorySection{
		Pos:       []int{c.pos.line, c.pos.col, c.pos.offset},
		Name:      nameStr,
		Lines:     items,
		NextIndex: c.data.getNextIndex(),
	}, nil)
}

func (p *parser) callonnodeType21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnodeType21(stack["name"], stack["lines"])
}

func (c *current) onnodeLines1(lines any) (any, error) {
	return retWrap(lines, nil)
}

func (p *parser) callonnodeLines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnodeLines1(stack["lines"])
}

func (c *current) onnodeLine2() (any, error) {
	return retWrap(nil, nil)
}

func (p *parser) callonnodeLine2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnodeLine2()
}

func (c *current) onnodeLineType21(code any) (any, error) {
	return parseReturnCodeSectionLine(c, "codeBlock", code.(string))
}

func (p *parser) callonnodeLineType21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnodeLineType21(stack["code"])
}

func (c *current) onnodeLineExprBlock1(expr any) (any, error) {
	return parseReturnCodeSectionLine(c, "codeInText", expr.(string))
}

func (p *parser) callonnodeLineExprBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnodeLineExprBlock1(stack["expr"])
}

func (c *current) onnodeLineCommonText12() (any, error) {
	return retWrap("{", nil)
}

func (p *parser) callonnodeLineCommonText12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnodeLineCommonText12()
}

func (c *current) onnodeLineCommonText14() (any, error) {
	return retWrap(toStr(c.text), nil)
}

func (p *parser) callonnodeLineCommonText14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnodeLineCommonText14()
}

func (c *current) onnodeLineCommonText8(items any) (any, error) {
	var items2 []string
	for _, i := range items.([]any) {
		items2 = append(items2, i.(string))
	}
	text := strings.Join(items2, "")
	return parseReturnTextSectionLine(c, text)
}

func (p *parser) callonnodeLineCommonText8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnodeLineCommonText8(stack["items"])
}

func (c *current) onnodeLineCommonText1(items any) (any, error) {
	v, _ := parseReturnTextSectionLine(c, "\n")
	items2 := items.([]any)
	items2 = append(items2, v)
	return retWrap(items2, nil)
}

func (p *parser) callonnodeLineCommonText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnodeLineCommonText1(stack["items"])
}

func (c *current) onCode1() (any, error) {
	return retWrap(toStr(c.text), nil)
}

func (p *parser) callonCode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode1()
}

func (c *current) onCodeExpr1() (any, error) {
	return retWrap(toStr(c.text), nil)
}

func (p *parser) callonCodeExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCodeExpr1()
}

func (c *current) onCodeExpr21() (any, error) {
	return retWrap(toStr(c.text), nil)
}

func (p *parser) callonCodeExpr21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCodeExpr21()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) { // nolint: deadcode
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) { // nolint: deadcode
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict

	data *ParserCustomData
}

type storeDict map[string]any

// the AST types...

// nolint: structcheck
type grammar struct {
	pos   position
	rules []*rule
}

// nolint: structcheck
type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

// nolint: structcheck
type choiceExpr struct {
	pos          position
	alternatives []any
}

// nolint: structcheck
type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

// nolint: structcheck
type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

// nolint: structcheck
type seqExpr struct {
	pos   position
	exprs []any
}

// nolint: structcheck
type throwExpr struct {
	pos   position
	label string
}

// nolint: structcheck
type labeledExpr struct {
	pos   position
	label string
	expr  any
}

// nolint: structcheck
type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr // nolint: structcheck
	notExpr        expr // nolint: structcheck
	zeroOrOneExpr  expr // nolint: structcheck
	zeroOrMoreExpr expr // nolint: structcheck
	oneOrMoreExpr  expr // nolint: structcheck
)

// nolint: structcheck
type ruleRefExpr struct {
	pos  position
	name string
}

// nolint: structcheck
type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

// nolint: structcheck
type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

// nolint: structcheck
type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

// nolint: structcheck
type customParserCodeExpr struct {
	pos position
	run func(*parser) (any, bool, error)
}

// nolint: structcheck
type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position // nolint: structcheck

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
			data:        &ParserCustomData{},
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setCustomData to the parser.
func (p *parser) setCustomData(data *ParserCustomData) {
	p.cur.data = data
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

// nolint: structcheck,deadcode
type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

// nolint: varcheck
const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

// nolint: structcheck,maligned
type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

// nolint: gocyclo
func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

// nolint: gocyclo
func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *customParserCodeExpr:
		val, ok = p.parseCustomParserCodeExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

// nolint: gocyclo
func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseCustomParserCodeExpr(code *customParserCodeExpr) (any, bool) {
	val, ok, err := code.run(p)
	if err != nil {
		p.addErr(err)
		return nil, true
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
