{
{{ if eq .target "go" }}
package novelscript

import "strings"

type ParserCustomData struct {
	CurIndex   int
	Name2Index map[string]int
}

func (d *ParserCustomData) getNextIndex() int {
    // 如果我是第0段，那next是1
    d.CurIndex += 1
    return d.CurIndex
}

func (d *ParserCustomData) setSectionIndex(name string) error {
    if name == "" {
        return nil
    }
    if d.Name2Index == nil {
        d.Name2Index = map[string]int{}
    }

    if _, exists := d.Name2Index[name]; exists {
        return errors.New("section name must be unique")
    }

    d.Name2Index[name] = d.CurIndex
    return nil
}

func parseFilterNil[T any](lines any, t T) []*T {
	var items []*T
	if x, ok := lines.([]any); ok {
		for _, i := range x {
			if i != nil {
				if _, ok2 := i.([]any); ok2 {
					items = append(items, parseFilterNil(i, t)...)
				} else {
					items = append(items, i.(*T))
				}
			}
		}
	}
	return items
}

func parseReturnTextSectionLine(c *current, text string) (any, error) {
	return retWrap(&StorySectionLine{
		Type: "", // 作为最常见种类，故意置空，节省空间
		Pos:  []int{c.pos.line, c.pos.col, c.pos.offset},
		Text: text,
	}, nil)
}

func parseReturnInvokeSectionLine(c *current, name string, params []string) (any, error) {
	return retWrap(&StorySectionLine{
		Type:   "invoke",
		Pos:    []int{c.pos.line, c.pos.col, c.pos.offset},
		Name:   name,
		Params: params,
	}, nil)
}

func parseReturnCodeSectionLine(c *current, typeName string, code string) (any, error) {
	return retWrap(&StorySectionLine{
		Type: typeName,
		Pos:  []int{c.pos.line, c.pos.col, c.pos.offset},
		Code: code,
	}, nil)
}

func gatherParams(first any, v any) []string {
	if v == nil {
		return nil
	}

	items := []string{first.(string)}
	if x, ok := v.([]any); ok {
		for _, i := range x {
			items = append(items, i.(string))
		}
	}
	return items
}

func retWrap(a any, err error) (any, error) {
	return a, err
}

func toStr(x []byte) string {
	return string(x)
}

func toStrWithTrim(x []byte) string {
	return strings.TrimSpace(string(x))
}

{{ else }}
class ParserCustomData {
    public var curIndex = 0;
    public var name2Index = new Map<String, Int>();
	public function new() {}

	public function getNextIndex():Int {
        // 如果我是第0段，那next是1
        this.curIndex += 1;
        return this.curIndex;
	}

	public function setSectionIndex(name:Null<String>):Exception {
		if (name == "" || name == null) {
			return null;
		}
		if (this.name2Index.exists(name)) {
			return new Exception("section name must be unique");
		}
		this.name2Index[name] = this.curIndex;
		return null;
	}
}

function parseFilterNil(lines:Any):Array<Any> {
	var items:Array<Any> = [];
	if (Std.isOfType(lines, Array)) {
		var x:Array<Any> = cast lines;
		for (i in x) {
			if (i != null) {
				if (Std.isOfType(i, Array)) {
					for (j in parseFilterNil(i)) {
						items.push(j);
					}
				} else {
					items.push(i);
				}
			}
		}
	}
	return items;
}

function parseReturnTextSectionLine(c:Current, text:String) {
	return retWrap({
		pos: [c.pos.line, c.pos.col, c.pos.offset],
		type: "", // 作为最常见种类，故意置空，节省空间
		text: text,
	}, nil);
}

function parseReturnInvokeSectionLine(c:Current, name:String, params:Array<String>) {
	return retWrap({
		pos: [c.pos.line, c.pos.col, c.pos.offset],
		type: "invoke",
		name: name,
		params: params,
	}, nil);
}

function parseReturnCodeSectionLine(c:Current, typeName:String, code:String) {
	return retWrap({
		pos: [c.pos.line, c.pos.col, c.pos.offset],
		type: typeName,
		code: code,
	}, nil);
}

function gatherParams(first:Any, v:Any):Array<String> {
	if (v == null) {
		return null;
	}
	var items:Array<String> = [first];
	for (i in parseFilterNil(v)) {
		items.push(i);
	}
	return items;
}

var retWrap = (a:Any, err:Exception) -> {val: a, err: err};
var toStr = (x:String) -> x;
var toStrWithTrim = (x:String) -> StringTools.trim(x);
var nil = null;
{{ end }}
}

// ENTRY POINT
input <- sp x:nodes !. {
    return retWrap(x, nil);
}

nodes <- nodes:(node*) {
{{ if eq .target "go" }}
    var items []*StorySection
	if x, ok := nodes.([]any); ok {
		for _, i := range x {
		    items = append(items, i.(*StorySection))
		}
	}
    return retWrap(&Story{Items: items}, nil);
{{ else }}
    return retWrap(new Types.Story(nodes), nil);
{{ end }}
}

_nodeCond <- '[' cond:CodeExpr2? ']' { return retWrap(cond, nil); }
_nodeNext <- '[' name:identifier ']' { return retWrap(name, nil); }

node <- nodeType1 / nodeType2

nodeType1 <- ':' spNoCR name:identifier? spNoCR (cond:_nodeCond spNoCR next:_nodeNext?) spNoCR cr2 lines:nodeLines {
{{ if eq .target "go" }}
    nameStr, _ := name.(string)
    condStr, _ := cond.(string)
    nextStr, _ := next.(string)
    items := parseFilterNil(lines, StorySectionLine{})

    if err := c.data.setSectionIndex(nameStr); err != nil {
        return nil, err
    }
    return retWrap(&StorySection{
        Pos: []int{c.pos.line, c.pos.col, c.pos.offset},
        Name: nameStr,
        Lines: items,
        Condition: condStr,
        Next: nextStr,
        NextIndex: c.data.getNextIndex(),
    }, nil);
{{ else }}
    var e = c.data.setSectionIndex(name);
    if (e != null) {
        return retWrap(null, e);
    }

    return retWrap({
        pos:[c.pos.line, c.pos.col, c.pos.offset],
        name:name,
        lines:parseFilterNil(lines),
        condition:cond,
        next:next,
        nextIndex: c.data.getNextIndex(),
    }, nil);
{{ end }}
}

nodeType2 <- ':' spNoCR name:identifier? spNoCR cr2 lines:nodeLines {
{{ if eq .target "go" }}
    nameStr, _ := name.(string)
    items := parseFilterNil(lines, StorySectionLine{})

    if err := c.data.setSectionIndex(nameStr); err != nil {
        return nil, err
    }
    return retWrap(&StorySection{
        Pos: []int{c.pos.line, c.pos.col, c.pos.offset},
        Name: nameStr,
        Lines: items,
        NextIndex: c.data.getNextIndex(),
    }, nil);
{{ else }}
    var e = c.data.setSectionIndex(name);
    if (e != null) {
        return retWrap(null, e);
    }

    return retWrap({
        pos:[c.pos.line, c.pos.col, c.pos.offset],
        name:name,
        lines:parseFilterNil(lines),
        nextIndex: c.data.getNextIndex(),
    }, nil);
{{ end }}
}

nodeLines <- lines:nodeLine* sp { return retWrap(lines, nil); }

nodeLine <- nodeLineTypeComment / nodeLineType2 / nodeLineCommonText

nodeLineTypeComment <- '@' '#' (!cr .)+ cr sp { return retWrap(nil, nil); }

_curLine <- (!cr .)+ { return retWrap(toStr(c.text), nil); }
nodeLineType1x <- '@' !'{' expr:_curLine cr2 {
    return parseReturnCodeSectionLine(c, "@", expr.(string));
}

nodeLineType1 <- '@' name:identifier params:funcInvoke sp {
{{ if eq .target "go" }}
    return parseReturnInvokeSectionLine(c, name.(string), params.([]string))
{{ else }}
    return parseReturnInvokeSectionLine(c, name, params);
{{ end }}
}


// _storyNodeCodeBlock <- ( ( !"}!" . )* ) { return retWrap(toStrWithTrim(c.text), nil); }

nodeLineType2 <- "@{" code:Code ("}!" / "}") spNoCR cr2 {
{{ if eq .target "go" }}
    return parseReturnCodeSectionLine(c, "codeBlock", code.(string));
{{ else }}
    return parseReturnCodeSectionLine(c, "codeBlock", code);
{{ end }}
}

_nltEscape <- "\\{" { return retWrap("{", nil); }
_nltChar <- [^\r\n{] { return retWrap(toStr(c.text), nil); }
nodeLineText <- items:((_nltEscape / _nltChar)+) {
{{ if eq .target "go" }}
    var items2 []string
    for _, i := range items.([]any) {
        items2 = append(items2, i.(string));
    }
    text := strings.Join(items2, "")
    return parseReturnTextSectionLine(c, text);
{{ else }}
	var items2 = [];
	if (Std.isOfType(items, Array)) {
		var itemsX:Array<Any> = cast items;
		for (i in itemsX) {
			items2.push(i);
		}
	}
	var text = items2.join("");
	return parseReturnTextSectionLine(c, text);
{{ end }}
}

nodeLineExprBlock <- '{' expr:CodeExpr '}' {
{{ if eq .target "go" }}
    return parseReturnCodeSectionLine(c, "codeInText", expr.(string));
{{ else }}
    return parseReturnCodeSectionLine(c, "codeInText", expr);
{{ end }}
}

// Line not starts with [:@], normal text and {expr} are available.
nodeLineCommonText <- ![:@] items:(( nodeLineText / nodeLineExprBlock )*) cr2 {
{{ if eq .target "go" }}
    v, _ := parseReturnTextSectionLine(c, "\n");
    items2 := items.([]any)
    items2 = append(items2, v);
    return retWrap(items2, nil);
{{ else }}
	var x = parseReturnTextSectionLine(c, "\n");
	var items2:Array<Any> = null;
	if (Std.isOfType(items, Array)) {
		items2 = cast items;
		items2.push(x.val);
	}
	return retWrap(items2, nil);
{{ end }}
}

funcInvoke <- '(' sp ')' { {{ if eq .target "go" }} return retWrap([]string{}, nil) {{ else }} return retWrap([], nil); {{ end }} }
            / '(' sp first:_codeExpr rest:(funcInvokeParamExtend*) ')' { return retWrap(gatherParams(first, rest), nil); }

funcInvokeParamExtend <- sp ',' sp e:_codeExpr { return retWrap(e, nil); }

// codeExpr <- [^\n,)]+ { return retWrap(toStr(c.text), nil); }
_codeExpr <- _codeExpr2 { return retWrap(toStr(c.text), nil); }

_codeExpr2 <- identifier
           / integer
           / [0-9]* '.' [0-9]+
           / stringType

stringType <- (codeString / '`' [^`]* '`') { return retWrap(toStr(c.text), nil); }

codeString ← '"' ( !EscapedChar . / '\\' EscapeSequence )* '"'
           / '\'' ( !EscapedChar2 . / '\\' EscapeSequence2 )* '\''

EscapedChar2 ← [\x00-\x1f'\\]
EscapeSequence2 ← SingleCharEscape2 / UnicodeEscape
SingleCharEscape2 ← ['\\/bfnrt]

String ← '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
    c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
    return strconv.Unquote(string(c.text))
}
EscapedChar ← [\x00-\x1f"\\]
EscapeSequence ← SingleCharEscape / UnicodeEscape
SingleCharEscape ← ["\\/bfnrt]
UnicodeEscape ← 'u' HexDigit HexDigit HexDigit HexDigit
DecimalDigit ← [0-9]
NonZeroDecimalDigit ← [1-9]
HexDigit ← [0-9a-f]i

integer <- '-'? [0-9]+ {
{{ if eq .target "go" }}
    return strconv.Atoi(string(c.text));
{{ else }}
    return retWrap(Std.parseInt(c.text), nil);
{{ end }}
}

identifier <- xidStart xidContinue* {
    return retWrap(toStr(c.text), nil);
}

// L + Other_ID_Start
xidStart <- [_\p{L}\p{Other_ID_Start}]

// xid_start + Nl + Mn + Mc + Nd + Pc + Other_ID_Continue \u200C\u200D
xidContinue <- [\p{L}\p{Other_ID_Start}\p{Nl}\p{Mn}\p{Mc}\p{Nd}\p{Pc}\p{Other_ID_Continue}]

sp "whitespace" <- [ \n\t\r]*

spNoCR <- [ \t]*

cr <- [\r\n]
cr2 <- '\r'? '\n'

// 仅支持 // 为注释，支持'' "" `` 三种文本的脚本语言
SourceChar <- .
Comment <- MultiLineComment / SingleLineComment
MultiLineComment <- "/*" ( !"*/" SourceChar )* "*/"
MultiLineCommentNoLineTerminator <- "/*" ( !( "*/" / cr ) SourceChar )* "*/"
SingleLineComment <- !("//{") "//" ( !cr SourceChar )*

CodeStringLiteral <- '"' (`\"` / `\\` / [^"\r\n])* '"' /
                    '`' [^`]* '`' /
                    '\'' (`\'` / `\\` / [^']+)* '\''


Code <- ( ( Comment / CodeStringLiteral / ![{}] SourceChar )+ / '{' Code '}' )* { return retWrap(toStr(c.text), nil); }
CodeExpr <- ( (CodeStringLiteral / ![{}] SourceChar)+ / '{' CodeExpr '}' )* { return retWrap(toStr(c.text), nil); }
CodeExpr2 <- ( (CodeStringLiteral / ![[\]] SourceChar)+ / '[' CodeExpr2 ']' )* { return retWrap(toStr(c.text), nil); }
